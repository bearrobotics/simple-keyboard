{"version":3,"file":"index.modern.esm.js","mappings":"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","sources":["webpack://simple-keyboard/./node_modules/hangul-js/hangul.js","webpack://simple-keyboard/webpack/bootstrap","webpack://simple-keyboard/webpack/runtime/define property getters","webpack://simple-keyboard/webpack/runtime/hasOwnProperty shorthand","webpack://simple-keyboard/./src/lib/services/KeyboardLayout.ts","webpack://simple-keyboard/./src/lib/services/Utilities.ts","webpack://simple-keyboard/./src/lib/services/PhysicalKeyboard.ts","webpack://simple-keyboard/./src/lib/components/CandidateBox.ts","webpack://simple-keyboard/./src/lib/components/Keyboard.ts","webpack://simple-keyboard/./src/lib/index.modern.ts"],"sourcesContent":["/**\r\n * Hangul.js\r\n * https://github.com/e-/Hangul.js\r\n *\r\n * Copyright 2017, Jaemin Jo\r\n * under the MIT license.\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n    var CHO = [\r\n        'ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ',\r\n        'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ',\r\n        'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ',\r\n        'ㅍ', 'ㅎ'\r\n    ],\r\n        JUNG = [\r\n            'ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ',\r\n            'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', ['ㅗ', 'ㅏ'], ['ㅗ', 'ㅐ'],\r\n            ['ㅗ', 'ㅣ'], 'ㅛ', 'ㅜ', ['ㅜ', 'ㅓ'], ['ㅜ', 'ㅔ'], ['ㅜ', 'ㅣ'],\r\n            'ㅠ', 'ㅡ', ['ㅡ', 'ㅣ'], 'ㅣ'\r\n        ],\r\n        JONG = [\r\n            '', 'ㄱ', 'ㄲ', ['ㄱ', 'ㅅ'], 'ㄴ', ['ㄴ', 'ㅈ'], ['ㄴ', 'ㅎ'], 'ㄷ', 'ㄹ',\r\n            ['ㄹ', 'ㄱ'], ['ㄹ', 'ㅁ'], ['ㄹ', 'ㅂ'], ['ㄹ', 'ㅅ'], ['ㄹ', 'ㅌ'], ['ㄹ', 'ㅍ'], ['ㄹ', 'ㅎ'], 'ㅁ',\r\n            'ㅂ', ['ㅂ', 'ㅅ'], 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\r\n        ],\r\n        HANGUL_OFFSET = 0xAC00,\r\n        CONSONANTS = [\r\n            'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄸ',\r\n            'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ',\r\n            'ㅁ', 'ㅂ', 'ㅃ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ',\r\n            'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\r\n        ],\r\n        COMPLETE_CHO = [\r\n            'ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ',\r\n            'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ',\r\n            'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\r\n        ],\r\n        COMPLETE_JUNG = [\r\n            'ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ',\r\n            'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', 'ㅘ', 'ㅙ',\r\n            'ㅚ', 'ㅛ', 'ㅜ', 'ㅝ', 'ㅞ', 'ㅟ',\r\n            'ㅠ', 'ㅡ', 'ㅢ', 'ㅣ'\r\n        ],\r\n        COMPLETE_JONG = [\r\n            '', 'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄹ',\r\n            'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ', 'ㅁ',\r\n            'ㅂ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\r\n        ],\r\n        COMPLEX_CONSONANTS = [\r\n            ['ㄱ', 'ㅅ', 'ㄳ'],\r\n            ['ㄴ', 'ㅈ', 'ㄵ'],\r\n            ['ㄴ', 'ㅎ', 'ㄶ'],\r\n            ['ㄹ', 'ㄱ', 'ㄺ'],\r\n            ['ㄹ', 'ㅁ', 'ㄻ'],\r\n            ['ㄹ', 'ㅂ', 'ㄼ'],\r\n            ['ㄹ', 'ㅅ', 'ㄽ'],\r\n            ['ㄹ', 'ㅌ', 'ㄾ'],\r\n            ['ㄹ', 'ㅍ', 'ㄿ'],\r\n            ['ㄹ', 'ㅎ', 'ㅀ'],\r\n            ['ㅂ', 'ㅅ', 'ㅄ']\r\n        ],\r\n        COMPLEX_VOWELS = [\r\n            ['ㅗ', 'ㅏ', 'ㅘ'],\r\n            ['ㅗ', 'ㅐ', 'ㅙ'],\r\n            ['ㅗ', 'ㅣ', 'ㅚ'],\r\n            ['ㅜ', 'ㅓ', 'ㅝ'],\r\n            ['ㅜ', 'ㅔ', 'ㅞ'],\r\n            ['ㅜ', 'ㅣ', 'ㅟ'],\r\n            ['ㅡ', 'ㅣ', 'ㅢ']\r\n        ],\r\n        CONSONANTS_HASH,\r\n        CHO_HASH,\r\n        JUNG_HASH,\r\n        JONG_HASH,\r\n        COMPLEX_CONSONANTS_HASH,\r\n        COMPLEX_VOWELS_HASH\r\n        ;\r\n\r\n    function _makeHash(array) {\r\n        var length = array.length,\r\n            hash = { 0: 0 }\r\n            ;\r\n        for (var i = 0; i < length; i++) {\r\n            if (array[i])\r\n                hash[array[i].charCodeAt(0)] = i;\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    CONSONANTS_HASH = _makeHash(CONSONANTS);\r\n    CHO_HASH = _makeHash(COMPLETE_CHO);\r\n    JUNG_HASH = _makeHash(COMPLETE_JUNG);\r\n    JONG_HASH = _makeHash(COMPLETE_JONG);\r\n\r\n    function _makeComplexHash(array) {\r\n        var length = array.length,\r\n            hash = {},\r\n            code1,\r\n            code2\r\n            ;\r\n        for (var i = 0; i < length; i++) {\r\n            code1 = array[i][0].charCodeAt(0);\r\n            code2 = array[i][1].charCodeAt(0);\r\n            if (typeof hash[code1] === 'undefined') {\r\n                hash[code1] = {};\r\n            }\r\n            hash[code1][code2] = array[i][2].charCodeAt(0);\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    COMPLEX_CONSONANTS_HASH = _makeComplexHash(COMPLEX_CONSONANTS);\r\n    COMPLEX_VOWELS_HASH = _makeComplexHash(COMPLEX_VOWELS);\r\n\r\n    function _isConsonant(c) {\r\n        return typeof CONSONANTS_HASH[c] !== 'undefined';\r\n    }\r\n\r\n    function _isCho(c) {\r\n        return typeof CHO_HASH[c] !== 'undefined';\r\n    }\r\n\r\n    function _isJung(c) {\r\n        return typeof JUNG_HASH[c] !== 'undefined';\r\n    }\r\n\r\n    function _isJong(c) {\r\n        return typeof JONG_HASH[c] !== 'undefined';\r\n    }\r\n\r\n    function _isHangul(c /* code number */) {\r\n        return 0xAC00 <= c && c <= 0xd7a3;\r\n    }\r\n\r\n    function _isJungJoinable(a, b) {\r\n        return (COMPLEX_VOWELS_HASH[a] && COMPLEX_VOWELS_HASH[a][b]) ? COMPLEX_VOWELS_HASH[a][b] : false;\r\n    }\r\n\r\n    function _isJongJoinable(a, b) {\r\n        return COMPLEX_CONSONANTS_HASH[a] && COMPLEX_CONSONANTS_HASH[a][b] ? COMPLEX_CONSONANTS_HASH[a][b] : false;\r\n    }\r\n\r\n    var disassemble = function (string, grouped) {\r\n        if (string === null) {\r\n            throw new Error('Arguments cannot be null');\r\n        }\r\n\r\n        if (typeof string === 'object') {\r\n            string = string.join('');\r\n        }\r\n\r\n        var result = [],\r\n            length = string.length,\r\n            cho,\r\n            jung,\r\n            jong,\r\n            code,\r\n            r\r\n            ;\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            var temp = [];\r\n\r\n            code = string.charCodeAt(i);\r\n            if (_isHangul(code)) { // 완성된 한글이면\r\n                code -= HANGUL_OFFSET;\r\n                jong = code % 28;\r\n                jung = (code - jong) / 28 % 21;\r\n                cho = parseInt((code - jong) / 28 / 21);\r\n                temp.push(CHO[cho]);\r\n                if (typeof JUNG[jung] === 'object') {\r\n                    temp = temp.concat(JUNG[jung]);\r\n                } else {\r\n                    temp.push(JUNG[jung]);\r\n                }\r\n                if (jong > 0) {\r\n                    if (typeof JONG[jong] === 'object') {\r\n                        temp = temp.concat(JONG[jong]);\r\n                    } else {\r\n                        temp.push(JONG[jong]);\r\n                    }\r\n                }\r\n            } else if (_isConsonant(code)) { //자음이면\r\n                if (_isCho(code)) {\r\n                    r = CHO[CHO_HASH[code]];\r\n                } else {\r\n                    r = JONG[JONG_HASH[code]];\r\n                }\r\n                if (typeof r === 'string') {\r\n                    temp.push(r);\r\n                } else {\r\n                    temp = temp.concat(r);\r\n                }\r\n            } else if (_isJung(code)) {\r\n                r = JUNG[JUNG_HASH[code]];\r\n                if (typeof r === 'string') {\r\n                    temp.push(r);\r\n                } else {\r\n                    temp = temp.concat(r);\r\n                }\r\n            } else {\r\n                temp.push(string.charAt(i));\r\n            }\r\n\r\n            if (grouped) result.push(temp);\r\n            else result = result.concat(temp);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    var disassembleToString = function (str) {\r\n        if (typeof str !== 'string') {\r\n            return '';\r\n        }\r\n        str = disassemble(str);\r\n        return str.join('');\r\n    };\r\n\r\n    var assemble = function (array) {\r\n        if (typeof array === 'string') {\r\n            array = disassemble(array);\r\n        }\r\n\r\n        var result = [],\r\n            length = array.length,\r\n            code,\r\n            stage = 0,\r\n            complete_index = -1, //완성된 곳의 인덱스\r\n            previous_code,\r\n            jong_joined = false\r\n            ;\r\n\r\n        function _makeHangul(index) { // complete_index + 1부터 index까지를 greedy하게 한글로 만든다.\r\n            var code,\r\n                cho,\r\n                jung1,\r\n                jung2,\r\n                jong1 = 0,\r\n                jong2,\r\n                hangul = ''\r\n                ;\r\n\r\n            jong_joined = false;\r\n            if (complete_index + 1 > index) {\r\n                return;\r\n            }\r\n            for (var step = 1; ; step++) {\r\n                if (step === 1) {\r\n                    cho = array[complete_index + step].charCodeAt(0);\r\n                    if (_isJung(cho)) { // 첫번째 것이 모음이면 1) ㅏ같은 경우이거나 2) ㅙ같은 경우이다\r\n                        if (complete_index + step + 1 <= index && _isJung(jung1 = array[complete_index + step + 1].charCodeAt(0))) { //다음것이 있고 모음이면\r\n                            result.push(String.fromCharCode(_isJungJoinable(cho, jung1)));\r\n                            complete_index = index;\r\n                            return;\r\n                        } else {\r\n                            result.push(array[complete_index + step]);\r\n                            complete_index = index;\r\n                            return;\r\n                        }\r\n                    } else if (!_isCho(cho)) {\r\n                        result.push(array[complete_index + step]);\r\n                        complete_index = index;\r\n                        return;\r\n                    }\r\n                    hangul = array[complete_index + step];\r\n                } else if (step === 2) {\r\n                    jung1 = array[complete_index + step].charCodeAt(0);\r\n                    if (_isCho(jung1)) { //두번째 또 자음이 오면 ㄳ 에서 ㅅ같은 경우이다\r\n                        cho = _isJongJoinable(cho, jung1);\r\n                        hangul = String.fromCharCode(cho);\r\n                        result.push(hangul);\r\n                        complete_index = index;\r\n                        return;\r\n                    } else {\r\n                        hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + HANGUL_OFFSET);\r\n                    }\r\n                } else if (step === 3) {\r\n                    jung2 = array[complete_index + step].charCodeAt(0);\r\n                    if (_isJungJoinable(jung1, jung2)) {\r\n                        jung1 = _isJungJoinable(jung1, jung2);\r\n                    } else {\r\n                        jong1 = jung2;\r\n                    }\r\n                    hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);\r\n                    \r\n                } else if (step === 4) {\r\n                    jong2 = array[complete_index + step].charCodeAt(0);\r\n                    if (_isJongJoinable(jong1, jong2)) {\r\n                        jong1 = _isJongJoinable(jong1, jong2);\r\n                    } else {\r\n                        jong1 = jong2;\r\n                    }\r\n                    hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);\r\n                } else if (step === 5) {\r\n                    jong2 = array[complete_index + step].charCodeAt(0);\r\n                    jong1 = _isJongJoinable(jong1, jong2);\r\n                    hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);\r\n                }\r\n\r\n                if (complete_index + step >= index) {\r\n                    result.push(hangul);\r\n                    complete_index = index;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            code = array[i].charCodeAt(0);\r\n            if (!_isCho(code) && !_isJung(code) && !_isJong(code)) { //초, 중, 종성 다 아니면\r\n                _makeHangul(i - 1);\r\n                _makeHangul(i);\r\n                stage = 0;\r\n                continue;\r\n            }\r\n            //console.log(stage, array[i]);\r\n            if (stage === 0) { // 초성이 올 차례\r\n                if (_isCho(code)) { // 초성이 오면 아무 문제 없다.\r\n                    stage = 1;\r\n                } else if (_isJung(code)) {\r\n                    // 중성이오면 ㅐ 또는 ㅘ 인것이다. 바로 구분을 못한다. 따라서 특수한 stage인 stage4로 이동\r\n                    stage = 4;\r\n                }\r\n            } else if (stage == 1) { //중성이 올 차례\r\n                if (_isJung(code)) { //중성이 오면 문제없음 진행.\r\n                    stage = 2;\r\n                } else { //아니고 자음이오면 ㄻ같은 경우가 있고 ㄹㅋ같은 경우가 있다.\r\n                    if (_isJongJoinable(previous_code, code)) {\r\n                        // 합쳐질 수 있다면 ㄻ 같은 경우인데 이 뒤에 모음이 와서 ㄹ마 가 될수도 있고 초성이 올 수도 있다. 따라서 섣불리 완성할 수 없다. 이땐 stage5로 간다.\r\n                        stage = 5;\r\n                    } else { //합쳐질 수 없다면 앞 글자 완성 후 여전히 중성이 올 차례\r\n                        _makeHangul(i - 1);\r\n                    }\r\n                }\r\n            } else if (stage == 2) { //종성이 올 차례\r\n                if (_isJong(code)) { //종성이 오면 다음엔 자음 또는 모음이 온다.\r\n                    stage = 3;\r\n                } else if (_isJung(code)) { //그런데 중성이 오면 앞의 모음과 합칠 수 있는지 본다.\r\n                    if (_isJungJoinable(previous_code, code)) { //합칠 수 있으면 여전히 종성이 올 차례고 그대로 진행\r\n                    } else { // 합칠 수 없다면 오타가 생긴 경우\r\n                        _makeHangul(i - 1);\r\n                        stage = 4;\r\n                    }\r\n                } else { // 받침이 안되는 자음이 오면 ㄸ 같은 이전까지 완성하고 다시시작\r\n                    _makeHangul(i - 1);\r\n                    stage = 1;\r\n                }\r\n            } else if (stage == 3) { // 종성이 하나 온 상태.\r\n                if (_isJong(code)) { // 또 종성이면 합칠수 있는지 본다.\r\n                    if (!jong_joined && _isJongJoinable(previous_code, code)) { //합칠 수 있으면 계속 진행. 왜냐하면 이번에 온 자음이 다음 글자의 초성이 될 수도 있기 때문. 대신 이 기회는 한번만\r\n                        jong_joined = true;\r\n                    } else { //없으면 한글자 완성\r\n                        _makeHangul(i - 1);\r\n                        stage = 1; // 이 종성이 초성이 되고 중성부터 시작\r\n                    }\r\n                } else if (_isCho(code)) { // 초성이면 한글자 완성.\r\n                    _makeHangul(i - 1);\r\n                    stage = 1; //이 글자가 초성이되므로 중성부터 시작\r\n                } else if (_isJung(code)) { // 중성이면 이전 종성은 이 중성과 합쳐지고 앞 글자는 받침이 없다.\r\n                    _makeHangul(i - 2);\r\n                    stage = 2;\r\n                }\r\n            } else if (stage == 4) { // 중성이 하나 온 상태\r\n                if (_isJung(code)) { //중성이 온 경우\r\n                    if (_isJungJoinable(previous_code, code)) { //이전 중성과 합쳐질 수 있는 경우\r\n                        _makeHangul(i);\r\n                        stage = 0;\r\n                    } else { //중성이 왔지만 못합치는 경우. ㅒㅗ 같은\r\n                        _makeHangul(i - 1);\r\n                    }\r\n                } else { // 아니면 자음이 온 경우.\r\n                    _makeHangul(i - 1);\r\n                    stage = 1;\r\n                }\r\n            } else if (stage == 5) { // 초성이 연속해서 두개 온 상태 ㄺ\r\n                if (_isJung(code)) { //이번에 중성이면 ㄹ가\r\n                    _makeHangul(i - 2);\r\n                    stage = 2;\r\n                } else {\r\n                    _makeHangul(i - 1);\r\n                    stage = 1;\r\n                }\r\n            }\r\n            previous_code = code;\r\n        }\r\n        _makeHangul(i - 1);\r\n        return result.join('');\r\n    };\r\n\r\n    var search = function (a, b) {\r\n        var ad = disassemble(a).join(''),\r\n            bd = disassemble(b).join('')\r\n            ;\r\n\r\n        return ad.indexOf(bd);\r\n    };\r\n\r\n    var rangeSearch = function (haystack, needle) {\r\n        var hex = disassemble(haystack).join(''),\r\n            nex = disassemble(needle).join(''),\r\n            grouped = disassemble(haystack, true),\r\n            re = new RegExp(nex, 'gi'),\r\n            indices = [],\r\n            result;\r\n\r\n        if (!needle.length) return [];\r\n\r\n        while ((result = re.exec(hex))) {\r\n            indices.push(result.index);\r\n        }\r\n\r\n        function findStart(index) {\r\n            for (var i = 0, length = 0; i < grouped.length; ++i) {\r\n                length += grouped[i].length;\r\n                if (index < length) return i;\r\n            }\r\n        }\r\n\r\n        function findEnd(index) {\r\n            for (var i = 0, length = 0; i < grouped.length; ++i) {\r\n                length += grouped[i].length;\r\n                if (index + nex.length <= length) return i;\r\n            }\r\n        }\r\n\r\n        return indices.map(function (i) {\r\n            return [findStart(i), findEnd(i)];\r\n        });\r\n    };\r\n\r\n    function Searcher(string) {\r\n        this.string = string;\r\n        this.disassembled = disassemble(string).join('');\r\n    }\r\n\r\n    Searcher.prototype.search = function (string) {\r\n        return disassemble(string).join('').indexOf(this.disassembled);\r\n    };\r\n    var endsWithConsonant = function (string) {\r\n        if (typeof string === 'object') {\r\n            string = string.join('');\r\n        }\r\n\r\n        var code = string.charCodeAt(string.length - 1);\r\n\r\n        if (_isHangul(code)) { // 완성된 한글이면\r\n            code -= HANGUL_OFFSET;\r\n            var jong = code % 28;\r\n            if (jong > 0) {\r\n                return true;\r\n            }\r\n        } else if (_isConsonant(code)) { //자음이면\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    var endsWith = function (string, target) {\r\n        return disassemble(string).pop() === target;\r\n    };\r\n\r\n\r\n    var hangul = {\r\n        disassemble: disassemble,\r\n        d: disassemble, // alias for disassemble\r\n        disassembleToString: disassembleToString,\r\n        ds: disassembleToString, // alias for disassembleToString\r\n        assemble: assemble,\r\n        a: assemble, // alias for assemble\r\n        search: search,\r\n        rangeSearch: rangeSearch,\r\n        Searcher: Searcher,\r\n        endsWithConsonant: endsWithConsonant,\r\n        endsWith: endsWith,\r\n        isHangul: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isHangul(c);\r\n        },\r\n        isComplete: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isHangul(c);\r\n        },\r\n        isConsonant: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isConsonant(c);\r\n        },\r\n        isVowel: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isJung(c);\r\n        },\r\n        isCho: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isCho(c);\r\n        },\r\n        isJong: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isJong(c);\r\n        },\r\n        isHangulAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isHangul(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isCompleteAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isHangul(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isConsonantAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isConsonant(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isVowelAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isJung(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isChoAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isCho(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isJongAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isJong(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        }\r\n    };\r\n\r\n    if (typeof define == 'function' && define.amd) {\r\n        define(function () {\r\n            return hangul;\r\n        });\r\n    } else if (typeof module !== 'undefined') {\r\n        module.exports = hangul;\r\n    } else {\r\n        window.Hangul = hangul;\r\n    }\r\n})();\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { KeyboardLayoutObject } from \"../interfaces\";\n\nexport const getDefaultLayout = (): KeyboardLayoutObject => {\n  return {\n    default: [\n      \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\n      \"{tab} q w e r t y u i o p [ ] \\\\\",\n      \"{lock} a s d f g h j k l ; ' {enter}\",\n      \"{shift} z x c v b n m , . / {shift}\",\n      \".com @ {space}\",\n    ],\n    shift: [\n      \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\n      \"{tab} Q W E R T Y U I O P { } |\",\n      '{lock} A S D F G H J K L : \" {enter}',\n      \"{shift} Z X C V B N M < > ? {shift}\",\n      \".com @ {space}\",\n    ],\n  };\n};\n","import * as hangul from \"hangul-js\";\n\nimport { KeyboardInput } from \"./../interfaces\";\nimport { KeyboardOptions, UtilitiesParams } from \"../interfaces\";\n\n/**\n * Utility Service\n */\nclass Utilities {\n  getOptions: () => KeyboardOptions;\n  getCaretPosition: () => number | null;\n  getCaretPositionEnd: () => number | null;\n  dispatch: any;\n  maxLengthReached!: boolean;\n\n  /**\n   * Creates an instance of the Utility service\n   */\n  constructor({\n    getOptions,\n    getCaretPosition,\n    getCaretPositionEnd,\n    dispatch,\n  }: UtilitiesParams) {\n    this.getOptions = getOptions;\n    this.getCaretPosition = getCaretPosition;\n    this.getCaretPositionEnd = getCaretPositionEnd;\n    this.dispatch = dispatch;\n\n    /**\n     * Bindings\n     */\n    Utilities.bindMethods(Utilities, this);\n  }\n\n  /**\n   * Retrieve button type\n   *\n   * @param  {string} button The button's layout name\n   * @return {string} The button type\n   */\n  getButtonType(button: string): string {\n    return button.includes(\"{\") && button.includes(\"}\") && button !== \"{//}\"\n      ? \"functionBtn\"\n      : \"standardBtn\";\n  }\n\n  /**\n   * Adds default classes to a given button\n   *\n   * @param  {string} button The button's layout name\n   * @return {string} The classes to be added to the button\n   */\n  getButtonClass(button: string): string {\n    const buttonTypeClass = this.getButtonType(button);\n    const buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\n    let buttonNormalized = \"\";\n\n    if (buttonTypeClass !== \"standardBtn\")\n      buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\n\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\n  }\n\n  /**\n   * Default button display labels\n   */\n  getDefaultDiplay() {\n    return {\n      \"{bksp}\": \"backspace\",\n      \"{backspace}\": \"backspace\",\n      \"{enter}\": \"< enter\",\n      \"{shift}\": \"shift\",\n      \"{shiftleft}\": \"shift\",\n      \"{shiftright}\": \"shift\",\n      \"{alt}\": \"alt\",\n      \"{s}\": \"shift\",\n      \"{tab}\": \"tab\",\n      \"{lock}\": \"caps\",\n      \"{capslock}\": \"caps\",\n      \"{accept}\": \"Submit\",\n      \"{space}\": \" \",\n      \"{//}\": \" \",\n      \"{esc}\": \"esc\",\n      \"{escape}\": \"esc\",\n      \"{f1}\": \"f1\",\n      \"{f2}\": \"f2\",\n      \"{f3}\": \"f3\",\n      \"{f4}\": \"f4\",\n      \"{f5}\": \"f5\",\n      \"{f6}\": \"f6\",\n      \"{f7}\": \"f7\",\n      \"{f8}\": \"f8\",\n      \"{f9}\": \"f9\",\n      \"{f10}\": \"f10\",\n      \"{f11}\": \"f11\",\n      \"{f12}\": \"f12\",\n      \"{numpaddivide}\": \"/\",\n      \"{numlock}\": \"lock\",\n      \"{arrowup}\": \"↑\",\n      \"{arrowleft}\": \"←\",\n      \"{arrowdown}\": \"↓\",\n      \"{arrowright}\": \"→\",\n      \"{prtscr}\": \"print\",\n      \"{scrolllock}\": \"scroll\",\n      \"{pause}\": \"pause\",\n      \"{insert}\": \"ins\",\n      \"{home}\": \"home\",\n      \"{pageup}\": \"up\",\n      \"{delete}\": \"del\",\n      \"{forwarddelete}\": \"del\",\n      \"{end}\": \"end\",\n      \"{pagedown}\": \"down\",\n      \"{numpadmultiply}\": \"*\",\n      \"{numpadsubtract}\": \"-\",\n      \"{numpadadd}\": \"+\",\n      \"{numpadenter}\": \"enter\",\n      \"{period}\": \".\",\n      \"{numpaddecimal}\": \".\",\n      \"{numpad0}\": \"0\",\n      \"{numpad1}\": \"1\",\n      \"{numpad2}\": \"2\",\n      \"{numpad3}\": \"3\",\n      \"{numpad4}\": \"4\",\n      \"{numpad5}\": \"5\",\n      \"{numpad6}\": \"6\",\n      \"{numpad7}\": \"7\",\n      \"{numpad8}\": \"8\",\n      \"{numpad9}\": \"9\",\n    };\n  }\n  /**\n   * Returns the display (label) name for a given button\n   *\n   * @param  {string} button The button's layout name\n   * @param  {object} display The provided display option\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\n   */\n  getButtonDisplayName(\n    button: string,\n    display: KeyboardOptions[\"display\"],\n    mergeDisplay = false\n  ) {\n    if (mergeDisplay) {\n      display = Object.assign({}, this.getDefaultDiplay(), display);\n    } else {\n      display = display || this.getDefaultDiplay();\n    }\n\n    return display[button] || button;\n  }\n\n  /**\n   * Returns the updated input resulting from clicking a given button\n   *\n   * @param  {string} button The button's layout name\n   * @param  {string} input The input string\n   * @param  {number} caretPos The cursor's current position\n   * @param  {number} caretPosEnd The cursor's current end position\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\n   */\n  getUpdatedInput(\n    button: string,\n    input: string,\n    caretPos: any,\n    caretPosEnd = caretPos,\n    moveCaret = false\n  ) {\n    const options = this.getOptions();\n    const commonParams: [number | undefined, number | undefined, boolean] = [\n      caretPos,\n      caretPosEnd,\n      moveCaret,\n    ];\n\n    let output = input;\n\n    if (\n      (button === \"{bksp}\" || button === \"{backspace}\") &&\n      output.length > 0\n    ) {\n      output = this.removeAt(output, ...commonParams);\n    } else if (\n      (button === \"{delete}\" || button === \"{forwarddelete}\") &&\n      output.length > 0\n    ) {\n      output = this.removeForwardsAt(output, ...commonParams);\n    } else if (button === \"{space}\")\n      output = this.addStringAt(output, \" \", ...commonParams);\n    else if (\n      button === \"{tab}\" &&\n      !(\n        typeof options.tabCharOnTab === \"boolean\" &&\n        options.tabCharOnTab === false\n      )\n    ) {\n      output = this.addStringAt(output, \"\\t\", ...commonParams);\n    } else if (\n      (button === \"{enter}\" || button === \"{numpadenter}\") &&\n      options.newLineOnEnter\n    )\n      output = this.addStringAt(output, \"\\n\", ...commonParams);\n    else if (\n      button.includes(\"numpad\") &&\n      Number.isInteger(Number(button[button.length - 2]))\n    ) {\n      output = this.addStringAt(\n        output,\n        button[button.length - 2],\n        ...commonParams\n      );\n    } else if (button === \"{numpaddivide}\")\n      output = this.addStringAt(output, \"/\", ...commonParams);\n    else if (button === \"{numpadmultiply}\")\n      output = this.addStringAt(output, \"*\", ...commonParams);\n    else if (button === \"{numpadsubtract}\")\n      output = this.addStringAt(output, \"-\", ...commonParams);\n    else if (button === \"{numpadadd}\")\n      output = this.addStringAt(output, \"+\", ...commonParams);\n    else if (button === \"{numpaddecimal}\")\n      output = this.addStringAt(output, \".\", ...commonParams);\n    else if (button === \"{\" || button === \"}\")\n      output = this.addStringAt(output, button, ...commonParams);\n    else if (!button.includes(\"{\") && !button.includes(\"}\"))\n      output = this.addStringAt(output, button, ...commonParams);\n\n    if(options.debug){\n      console.log(\"Input will be: \"+ output);\n    }\n\n    return output;\n  }\n\n  /**\n   * Moves the cursor position by a given amount\n   *\n   * @param  {number} length Represents by how many characters the input should be moved\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\n   */\n  updateCaretPos(length: number, minus = false) {\n    const newCaretPos = this.updateCaretPosAction(length, minus);\n\n    this.dispatch((instance: any) => {\n      instance.setCaretPosition(newCaretPos);\n    });\n  }\n\n  /**\n   * Action method of updateCaretPos\n   *\n   * @param  {number} length Represents by how many characters the input should be moved\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\n   */\n  updateCaretPosAction(length: number, minus = false) {\n    const options = this.getOptions();\n    let caretPosition = this.getCaretPosition();\n\n    if (caretPosition != null) {\n      if (minus) {\n        if (caretPosition > 0) caretPosition = caretPosition - length;\n      } else {\n        caretPosition = caretPosition + length;\n      }\n    }\n\n    if (options.debug) {\n      console.log(\"Caret at:\", caretPosition);\n    }\n\n    return caretPosition;\n  }\n\n  /**\n   * Adds a string to the input at a given position\n   *\n   * @param  {string} source The source input\n   * @param  {string} str The string to add\n   * @param  {number} position The (cursor) position where the string should be added\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\n   */\n  addStringAt(\n    source: string,\n    str: string,\n    position = source.length,\n    positionEnd = source.length,\n    moveCaret = false\n  ) {\n    let output;\n\n    const prevCharacter = source.slice(position - 1, position);\n    const addingString = hangul.a([...hangul.d(prevCharacter), str]);\n\n    if (!position && position !== 0) {\n      output = source.slice(-1) + addingString;\n    } else {\n      output = [source.slice(0, position - 1), addingString, source.slice(positionEnd)].join(\n        \"\"\n      );\n    }\n\n    /**\n     * Avoid caret position change when maxLength is set\n     */\n    if (!this.isMaxLengthReached()) {\n      if (moveCaret) this.updateCaretPos(addingString.length - prevCharacter.length);\n    }\n\n    return output;\n  }\n\n  /**\n   * Check whether the button is a standard button\n   */\n  isStandardButton = (button: string) =>\n    button && !(button[0] === \"{\" && button[button.length - 1] === \"}\");\n\n  /**\n   * Removes an amount of characters before a given position\n   *\n   * @param  {string} source The source input\n   * @param  {number} position The (cursor) position from where the characters should be removed\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\n   */\n  removeAt(\n    source: string,\n    position = source.length,\n    positionEnd = source.length,\n    moveCaret = false\n  ) {\n    if (position === 0 && positionEnd === 0) {\n      return source;\n    }\n\n    let output;\n\n    if (position === positionEnd) {\n      let prevTwoChars;\n      let emojiMatched;\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\n\n      const prevCharacter = source.slice(position - 1, position);\n      const isPrevHangul = hangul.isHangul(prevCharacter);\n\n      /**\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\n       */\n      if (position !== null && position >= 0) {\n        prevTwoChars = source.substring(position - 2, position);\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\n\n        if (emojiMatched) {\n          output = source.substr(0, position - 2) + source.substr(position);\n          if (moveCaret) this.updateCaretPos(2, true);\n        } else if (isPrevHangul) {\n          const removingCharacter = hangul.a(hangul.d(prevCharacter).slice(0, -1))\n          const removedLength = 1 - removingCharacter.length;\n\n          output = source.substr(0, position - 1) + removingCharacter + source.substr(position);\n\n          if (moveCaret) this.updateCaretPos(removedLength, true);\n        } else {\n          output = source.substr(0, position - 1) + source.substr(position);\n          if (moveCaret) this.updateCaretPos(1, true);\n        }\n      } else {\n        prevTwoChars = source.slice(-2);\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\n\n        if (emojiMatched) {\n          output = source.slice(0, -2);\n          if (moveCaret) this.updateCaretPos(2, true);\n        } else if (isPrevHangul) {\n          const removingCharacter = hangul.a(hangul.d(prevCharacter).slice(0, -1))\n          const removedLength = 1 - removingCharacter.length;\n\n          output = source.slice(0, -1) + removingCharacter;\n          if (moveCaret) this.updateCaretPos(removedLength, true);\n        } else {\n          output = source.slice(0, -1);\n          if (moveCaret) this.updateCaretPos(1, true);\n        }\n      }\n    } else {\n      output = source.slice(0, position) + source.slice(positionEnd);\n      if (moveCaret) {\n        this.dispatch((instance: any) => {\n          instance.setCaretPosition(position);\n        });\n      }\n    }\n\n    return output;\n  }\n\n  /**\n   * Removes an amount of characters after a given position\n   *\n   * @param  {string} source The source input\n   * @param  {number} position The (cursor) position from where the characters should be removed\n   */\n  removeForwardsAt(\n    source: string,\n    position: number = source.length,\n    positionEnd: number = source.length,\n    moveCaret = false\n  ) {\n    if (!source?.length || position === null) {\n      return source;\n    }\n\n    let output;\n\n    if (position === positionEnd) {\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\n\n      /**\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\n       */\n      const nextTwoChars = source.substring(position, position + 2);\n      const emojiMatched = nextTwoChars.match(emojiMatchedReg);\n\n      if (emojiMatched) {\n        output = source.substr(0, position) + source.substr(position + 2);\n      } else {\n        output = source.substr(0, position) + source.substr(position + 1);\n      }\n    } else {\n      output = source.slice(0, position) + source.slice(positionEnd);\n      if (moveCaret) {\n        this.dispatch((instance: any) => {\n          instance.setCaretPosition(position);\n        });\n      }\n    }\n\n    return output;\n  }\n\n  /**\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\n   *\n   * @param  {object} inputObj\n   * @param  {string} updatedInput\n   */\n  handleMaxLength(inputObj: KeyboardInput, updatedInput: string) {\n    const options = this.getOptions();\n    const maxLength = options.maxLength;\n    const currentInput = inputObj[options.inputName || \"default\"];\n    const condition = updatedInput.length - 1 >= maxLength;\n\n    if (\n      /**\n       * If pressing this button won't add more characters\n       * We exit out of this limiter function\n       */\n      updatedInput.length <= currentInput.length\n    ) {\n      return false;\n    }\n\n    if (Number.isInteger(maxLength)) {\n      if (options.debug) {\n        console.log(\"maxLength (num) reached:\", condition);\n      }\n\n      if (condition) {\n        /**\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\n         */\n        this.maxLengthReached = true;\n        return true;\n      } else {\n        this.maxLengthReached = false;\n        return false;\n      }\n    }\n\n    if (typeof maxLength === \"object\") {\n      const condition =\n        updatedInput.length - 1 >= maxLength[options.inputName || \"default\"];\n\n      if (options.debug) {\n        console.log(\"maxLength (obj) reached:\", condition);\n      }\n\n      if (condition) {\n        this.maxLengthReached = true;\n        return true;\n      } else {\n        this.maxLengthReached = false;\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Gets the current value of maxLengthReached\n   */\n  isMaxLengthReached() {\n    return Boolean(this.maxLengthReached);\n  }\n\n  /**\n   * Determines whether a touch device is being used\n   */\n  isTouchDevice() {\n    return \"ontouchstart\" in window || navigator.maxTouchPoints;\n  }\n\n  /**\n   * Determines whether pointer events are supported\n   */\n  pointerEventsSupported() {\n    return !!window.PointerEvent;\n  }\n\n  /**\n   * Bind all methods in a given class\n   */\n\n  static bindMethods(myClass: any, instance: any) {\n    // eslint-disable-next-line no-unused-vars\n    for (const myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\n      const excludeMethod =\n        myMethod === \"constructor\" || myMethod === \"bindMethods\";\n      if (!excludeMethod) {\n        instance[myMethod] = instance[myMethod].bind(instance);\n      }\n    }\n  }\n\n  /**\n   * Transforms an arbitrary string to camelCase\n   *\n   * @param  {string} str The string to transform.\n   */\n  camelCase(str: string): string {\n    if (!str) return \"\";\n\n    return str\n      .toLowerCase()\n      .trim()\n      .split(/[.\\-_\\s]/g)\n      .reduce((str, word) =>\n        word.length ? str + word[0].toUpperCase() + word.slice(1) : str\n      );\n  }\n\n  /**\n   * Split array into chunks\n   */\n  chunkArray<T>(arr: T[], size: number): T[][] {\n    return [...Array(Math.ceil(arr.length / size))].map((_, i) =>\n      arr.slice(size * i, size + size * i)\n    );\n  }\n\n  /**\n   * Escape regex input\n   */\n  escapeRegex(str: string) {\n    return str.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n  }\n\n  /**\n   * Calculate caret position offset when using rtl option\n   */\n  getRtlOffset(index: number, input: string) {\n    let newIndex = index;\n    const startMarkerIndex = input.indexOf(\"\\u202B\");\n    const endMarkerIndex = input.indexOf(\"\\u202C\");\n\n    if(startMarkerIndex < index && startMarkerIndex != -1){ newIndex--; }\n    if(endMarkerIndex < index && startMarkerIndex != -1){ newIndex--; }\n\n    return newIndex < 0 ? 0 : newIndex;\n  }\n\n  /**\n   * Reusable empty function\n   */\n  static noop = () => {};\n}\n\nexport default Utilities;\n","import { KeyboardOptions, PhysicalKeyboardParams } from \"../interfaces\";\nimport Utilities from \"../services/Utilities\";\n\n/**\n * Physical Keyboard Service\n */\nclass PhysicalKeyboard {\n  getOptions: () => KeyboardOptions;\n  dispatch: any;\n\n  /**\n   * Creates an instance of the PhysicalKeyboard service\n   */\n  constructor({ dispatch, getOptions }: PhysicalKeyboardParams) {\n    /**\n     * @type {object} A simple-keyboard instance\n     */\n    this.dispatch = dispatch;\n    this.getOptions = getOptions;\n\n    /**\n     * Bindings\n     */\n    Utilities.bindMethods(PhysicalKeyboard, this);\n  }\n\n  handleHighlightKeyDown(e: KeyboardEvent) {\n    const options = this.getOptions();\n\n    if(options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)){\n      e.preventDefault();\n      e.stopImmediatePropagation();\n    }\n\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\n\n    this.dispatch((instance: any) => {\n      const standardButtonPressed = instance.getButtonElement(buttonPressed);\n      const functionButtonPressed = instance.getButtonElement(\n        `{${buttonPressed}}`\n      );\n      let buttonDOM;\n      let buttonName: string;\n\n      if (standardButtonPressed) {\n        buttonDOM = standardButtonPressed;\n        buttonName = buttonPressed;\n      } else if (functionButtonPressed) {\n        buttonDOM = functionButtonPressed;\n        buttonName = `{${buttonPressed}}`;\n      } else {\n        return;\n      }\n\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\n        buttonElement.style.background =\n          options.physicalKeyboardHighlightBgColor || \"#dadce4\";\n          buttonElement.style.color =\n          options.physicalKeyboardHighlightTextColor || \"black\";\n      }\n\n      if (buttonDOM) {\n        if(Array.isArray(buttonDOM)){\n          buttonDOM.forEach(buttonElement => applyButtonStyle(buttonElement));\n\n          // Even though we have an array of buttons, we just want to press one of them\n          if (options.physicalKeyboardHighlightPress) {\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\n              buttonDOM[0]?.onpointerdown?.(e);\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\n              buttonDOM[0]?.click();\n            } else {\n              instance.handleButtonClicked(buttonName, e);\n            }\n          }\n        } else {\n          applyButtonStyle(buttonDOM);\n\n          if (options.physicalKeyboardHighlightPress) {\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\n              buttonDOM?.onpointerdown?.(e);\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\n              buttonDOM.click();\n            } else {\n              instance.handleButtonClicked(buttonName, e);\n            }\n          }\n        }\n      }\n    });\n  }\n\n  handleHighlightKeyUp(e: KeyboardEvent) {\n    const options = this.getOptions();\n\n    if(options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)){\n      e.preventDefault();\n      e.stopImmediatePropagation();\n    }\n    \n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\n\n    this.dispatch((instance: any) => {\n      const buttonDOM =\n        instance.getButtonElement(buttonPressed) ||\n        instance.getButtonElement(`{${buttonPressed}}`);\n\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\n        if(buttonElement.removeAttribute){\n          buttonElement.removeAttribute(\"style\");\n        }\n      };\n\n      if (buttonDOM) {\n        if(Array.isArray(buttonDOM)){\n          buttonDOM.forEach(buttonElement => applyButtonStyle(buttonElement));\n\n          // Even though we have an array of buttons, we just want to press one of them\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\n            buttonDOM[0]?.onpointerup?.(e);\n          }\n        } else {\n          applyButtonStyle(buttonDOM);\n\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\n            buttonDOM?.onpointerup?.(e);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\n   * @param  {object} e The KeyboardEvent\n   */\n  getSimpleKeyboardLayoutKey(e: KeyboardEvent) {\n    let output = \"\";\n    const keyId = e.code || e.key || this.keyCodeToKey(e?.keyCode);\n\n    if (\n      keyId?.includes(\"Numpad\") ||\n      keyId?.includes(\"Shift\") ||\n      keyId?.includes(\"Space\") ||\n      keyId?.includes(\"Backspace\") ||\n      keyId?.includes(\"Control\") ||\n      keyId?.includes(\"Alt\") ||\n      keyId?.includes(\"Meta\")\n    ) {\n      output = e.code || \"\";\n    } else {\n      output = e.key || this.keyCodeToKey(e?.keyCode) || \"\";\n    }\n\n    return output.length > 1 ? output?.toLowerCase() : output;\n  }\n\n  /**\n   * Retrieve key from keyCode\n   */\n  keyCodeToKey(keyCode: number): string {\n    return {\n      8: \"Backspace\",\n      9: \"Tab\",\n      13: \"Enter\",\n      16: \"Shift\",\n      17: \"Ctrl\",\n      18: \"Alt\",\n      19: \"Pause\",\n      20: \"CapsLock\",\n      27: \"Esc\",\n      32: \"Space\",\n      33: \"PageUp\",\n      34: \"PageDown\",\n      35: \"End\",\n      36: \"Home\",\n      37: \"ArrowLeft\",\n      38: \"ArrowUp\",\n      39: \"ArrowRight\",\n      40: \"ArrowDown\",\n      45: \"Insert\",\n      46: \"Delete\",\n      48: \"0\",\n      49: \"1\",\n      50: \"2\",\n      51: \"3\",\n      52: \"4\",\n      53: \"5\",\n      54: \"6\",\n      55: \"7\",\n      56: \"8\",\n      57: \"9\",\n      65: \"A\",\n      66: \"B\",\n      67: \"C\",\n      68: \"D\",\n      69: \"E\",\n      70: \"F\",\n      71: \"G\",\n      72: \"H\",\n      73: \"I\",\n      74: \"J\",\n      75: \"K\",\n      76: \"L\",\n      77: \"M\",\n      78: \"N\",\n      79: \"O\",\n      80: \"P\",\n      81: \"Q\",\n      82: \"R\",\n      83: \"S\",\n      84: \"T\",\n      85: \"U\",\n      86: \"V\",\n      87: \"W\",\n      88: \"X\",\n      89: \"Y\",\n      90: \"Z\",\n      91: \"Meta\",\n      96: \"Numpad0\",\n      97: \"Numpad1\",\n      98: \"Numpad2\",\n      99: \"Numpad3\",\n      100: \"Numpad4\",\n      101: \"Numpad5\",\n      102: \"Numpad6\",\n      103: \"Numpad7\",\n      104: \"Numpad8\",\n      105: \"Numpad9\",\n      106: \"NumpadMultiply\",\n      107: \"NumpadAdd\",\n      109: \"NumpadSubtract\",\n      110: \"NumpadDecimal\",\n      111: \"NumpadDivide\",\n      112: \"F1\",\n      113: \"F2\",\n      114: \"F3\",\n      115: \"F4\",\n      116: \"F5\",\n      117: \"F6\",\n      118: \"F7\",\n      119: \"F8\",\n      120: \"F9\",\n      121: \"F10\",\n      122: \"F11\",\n      123: \"F12\",\n      144: \"NumLock\",\n      145: \"ScrollLock\",\n      186: \";\",\n      187: \"=\",\n      188: \",\",\n      189: \"-\",\n      190: \".\",\n      191: \"/\",\n      192: \"`\",\n      219: \"[\",\n      220: \"\\\\\",\n      221: \"]\",\n      222: \"'\",\n    }[keyCode] || \"\";\n  }\n\n  isModifierKey = (e: KeyboardEvent): boolean => {\n    return (\n      e.altKey\n      || e.ctrlKey\n      || e.shiftKey\n      || [\"Tab\", \"CapsLock\", \"Esc\", \"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].includes(\n        e.code || e.key || this.keyCodeToKey(e?.keyCode)\n      )\n    )\n  }\n}\n\nexport default PhysicalKeyboard;\n","import \"./css/CandidateBox.css\";\n\nimport Utilities from \"../services/Utilities\";\nimport {\n  CandidateBoxParams,\n  CandidateBoxRenderParams,\n  CandidateBoxShowParams,\n  KeyboardOptions,\n} from \"./../interfaces\";\n\nclass CandidateBox {\n  utilities: Utilities;\n  options: KeyboardOptions;\n  candidateBoxElement!: HTMLDivElement;\n  pageIndex = 0;\n  pageSize: number;\n\n  constructor({ utilities, options }: CandidateBoxParams) {\n    this.utilities = utilities;\n    this.options = options;\n    Utilities.bindMethods(CandidateBox, this);\n    this.pageSize = this.utilities.getOptions().layoutCandidatesPageSize || 5;\n  }\n\n  destroy() {\n    if (this.candidateBoxElement) {\n      this.candidateBoxElement.remove();\n      this.pageIndex = 0;\n    }\n  }\n\n  show({\n    candidateValue,\n    targetElement,\n    onSelect,\n  }: CandidateBoxShowParams): void {\n    if (!candidateValue || !candidateValue.length) {\n      return;\n    }\n\n    const candidateListPages = this.utilities.chunkArray(\n      candidateValue.split(\" \"),\n      this.pageSize\n    );\n\n    this.renderPage({\n      candidateListPages,\n      targetElement,\n      pageIndex: this.pageIndex,\n      nbPages: candidateListPages.length,\n      onItemSelected: (selectedCandidate: string, e: MouseEvent) => {\n        onSelect(selectedCandidate, e);\n        this.destroy();\n      },\n    });\n  }\n\n  renderPage({\n    candidateListPages,\n    targetElement,\n    pageIndex,\n    nbPages,\n    onItemSelected,\n  }: CandidateBoxRenderParams) {\n    // Remove current candidate box, if any\n    this.candidateBoxElement?.remove();\n\n    // Create candidate box element\n    this.candidateBoxElement = document.createElement(\"div\");\n    this.candidateBoxElement.className = \"hg-candidate-box\";\n\n    // Candidate box list\n    const candidateListULElement = document.createElement(\"ul\");\n    candidateListULElement.className = \"hg-candidate-box-list\";\n\n    // Create Candidate box list items\n    candidateListPages[pageIndex].forEach((candidateListItem) => {\n      const candidateListLIElement = document.createElement(\"li\");\n      const getMouseEvent = () => {\n        const mouseEvent = new (this.options.useTouchEvents ? TouchEvent : MouseEvent)(\"click\");\n        Object.defineProperty(mouseEvent, \"target\", {\n          value: candidateListLIElement,\n        });\n        return mouseEvent;\n      };\n\n      candidateListLIElement.className = \"hg-candidate-box-list-item\";\n      candidateListLIElement.innerHTML = this.options.display?.[candidateListItem] || candidateListItem;\n\n      if(this.options.useTouchEvents) {\n        candidateListLIElement.ontouchstart = (e: any) =>\n          onItemSelected(candidateListItem, e || getMouseEvent());\n      } else {\n        candidateListLIElement.onclick = (e = getMouseEvent() as MouseEvent) =>\n          onItemSelected(candidateListItem, e);\n      }\n\n      // Append list item to ul\n      candidateListULElement.appendChild(candidateListLIElement);\n    });\n\n    // Add previous button\n    const isPrevBtnElementActive = pageIndex > 0;\n    const prevBtnElement = document.createElement(\"div\");\n    prevBtnElement.classList.add(\"hg-candidate-box-prev\");\n    isPrevBtnElementActive &&\n      prevBtnElement.classList.add(\"hg-candidate-box-btn-active\");\n\n    const prevBtnElementClickAction = () => {\n      if (!isPrevBtnElementActive) return;\n      this.renderPage({\n        candidateListPages,\n        targetElement,\n        pageIndex: pageIndex - 1,\n        nbPages,\n        onItemSelected,\n      });\n    };\n\n    if(this.options.useTouchEvents) {\n      prevBtnElement.ontouchstart = prevBtnElementClickAction;\n    } else {\n      prevBtnElement.onclick = prevBtnElementClickAction;\n    }\n    \n    this.candidateBoxElement.appendChild(prevBtnElement);\n\n    // Add elements to container\n    this.candidateBoxElement.appendChild(candidateListULElement);\n\n    // Add next button\n    const isNextBtnElementActive = pageIndex < nbPages - 1;\n    const nextBtnElement = document.createElement(\"div\");\n    nextBtnElement.classList.add(\"hg-candidate-box-next\");\n    isNextBtnElementActive &&\n      nextBtnElement.classList.add(\"hg-candidate-box-btn-active\");\n\n    const nextBtnElementClickAction = () => {\n      if (!isNextBtnElementActive) return;\n      this.renderPage({\n        candidateListPages,\n        targetElement,\n        pageIndex: pageIndex + 1,\n        nbPages,\n        onItemSelected,\n      });\n    };\n\n    if(this.options.useTouchEvents) {\n      nextBtnElement.ontouchstart = nextBtnElementClickAction;\n    } else {\n      nextBtnElement.onclick = nextBtnElementClickAction;\n    }\n\n    this.candidateBoxElement.appendChild(nextBtnElement);\n\n    // Append candidate box to target element\n    targetElement.prepend(this.candidateBoxElement);\n  }\n}\n\nexport default CandidateBox;\n","import \"./css/Keyboard.css\";\n\nimport { getDefaultLayout } from \"../services/KeyboardLayout\";\nimport PhysicalKeyboard from \"../services/PhysicalKeyboard\";\nimport Utilities from \"../services/Utilities\";\nimport {\n  KeyboardOptions,\n  KeyboardInput,\n  KeyboardButtonElements,\n  KeyboardHandlerEvent,\n  KeyboardElement,\n  SKWindow,\n} from \"../interfaces\";\nimport CandidateBox from \"./CandidateBox\";\n\n/**\n * Root class for simple-keyboard.\n * This class:\n * - Parses the options\n * - Renders the rows and buttons\n * - Handles button functionality\n */\nclass SimpleKeyboard {\n  input!: KeyboardInput;\n  options!: KeyboardOptions;\n  utilities!: Utilities;\n  caretPosition!: number | null;\n  caretPositionEnd!: number | null;\n  keyboardDOM!: KeyboardElement;\n  keyboardPluginClasses!: string;\n  keyboardDOMClass!: string;\n  buttonElements!: KeyboardButtonElements;\n  currentInstanceName!: string;\n  allKeyboardInstances!: { [key: string]: SimpleKeyboard };\n  keyboardInstanceNames!: string[];\n  isFirstKeyboardInstance!: boolean;\n  physicalKeyboard!: PhysicalKeyboard;\n  modules!: { [key: string]: any };\n  activeButtonClass!: string;\n  holdInteractionTimeout!: number;\n  holdTimeout!: number;\n  isMouseHold!: boolean;\n  initialized!: boolean;\n  candidateBox!: CandidateBox | null;\n  keyboardRowsDOM!: KeyboardElement;\n  defaultName = \"default\";\n  activeInputElement: HTMLInputElement | HTMLTextAreaElement | null = null;\n\n  /**\n   * Creates an instance of SimpleKeyboard\n   * @param {Array} selectorOrOptions If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\n   */\n  constructor(\n    selectorOrOptions?: string | HTMLDivElement | KeyboardOptions,\n    keyboardOptions?: KeyboardOptions\n  ) {\n    if (typeof window === \"undefined\") return;\n\n    const {\n      keyboardDOMClass,\n      keyboardDOM,\n      options = {},\n    } = this.handleParams(selectorOrOptions, keyboardOptions);\n\n    /**\n     * Initializing Utilities\n     */\n    this.utilities = new Utilities({\n      getOptions: this.getOptions,\n      getCaretPosition: this.getCaretPosition,\n      getCaretPositionEnd: this.getCaretPositionEnd,\n      dispatch: this.dispatch,\n    });\n\n    /**\n     * Caret position\n     */\n    this.caretPosition = null;\n\n    /**\n     * Caret position end\n     */\n    this.caretPositionEnd = null;\n\n    /**\n     * Processing options\n     */\n    this.keyboardDOM = keyboardDOM;\n\n    /**\n     * @type {object}\n     * @property {object} layout Modify the keyboard layout.\n     * @property {string} layoutName Specifies which layout should be used.\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\n     * @property {array} buttonTheme A prop to add your own css classes to one or several buttons.\n     * @property {array} buttonAttributes A prop to add your own attributes to one or several buttons.\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\n     * @property {boolean} physicalKeyboardHighlightPress Presses keys highlighted by physicalKeyboardHighlight\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\n     * @property {boolean} physicalKeyboardHighlightPressUseClick Whether physicalKeyboardHighlightPress should use clicks to trigger buttons.\n     * @property {boolean} physicalKeyboardHighlightPressUsePointerEvents Whether physicalKeyboardHighlightPress should use pointer events to trigger buttons.\n     * @property {boolean} physicalKeyboardHighlightPreventDefault Whether physicalKeyboardHighlight should use preventDefault to disable default browser actions.\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\n     * @property {boolean} preventMouseUpDefault Calling preventDefault for the mouseup events.\n     * @property {boolean} stopMouseDownPropagation Stops pointer down events on simple-keyboard buttons from bubbling to parent elements.\n     * @property {boolean} stopMouseUpPropagation Stops pointer up events on simple-keyboard buttons from bubbling to parent elements.\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\n     * @property {function(keyboard: Keyboard):void} beforeInputUpdate Perform an action before any input change\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\n     * @property {boolean} disableButtonHold Disable button hold action.\n     * @property {boolean} rtl Adds unicode right-to-left control characters to input return values.\n     * @property {function} onKeyReleased Executes the callback function on key release.\n     * @property {array} modules Module classes to be loaded by simple-keyboard.\n     * @property {boolean} enableLayoutCandidates Enable input method editor candidate list support.\n     * @property {object} excludeFromLayout Buttons to exclude from layout\n     * @property {number} layoutCandidatesPageSize Determines size of layout candidate list\n     * @property {boolean} layoutCandidatesCaseSensitiveMatch Determines whether layout candidate match should be case sensitive.\n     * @property {boolean} disableCandidateNormalization Disables the automatic normalization for selected layout candidates\n     * @property {boolean} enableLayoutCandidatesKeyPress Enables onKeyPress triggering for layoutCandidate items\n     * @property {boolean} updateCaretOnSelectionChange Updates caret when selectionchange event is fired\n     */\n    this.options = {\n      layoutName: \"default\",\n      theme: \"hg-theme-default\",\n      inputName: \"default\",\n      preventMouseDownDefault: false,\n      enableLayoutCandidates: true,\n      excludeFromLayout: {},\n      ...options,\n    };\n\n    /**\n     * @type {object} Classes identifying loaded plugins\n     */\n    this.keyboardPluginClasses = \"\";\n\n    /**\n     * Bindings\n     */\n    Utilities.bindMethods(SimpleKeyboard, this);\n\n    /**\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\n     * @example\n     * // To get entered input\n     * const input = keyboard.getInput();\n     *\n     * // To clear entered input.\n     * keyboard.clearInput();\n     *\n     * @type {object}\n     * @property {object} default Default SimpleKeyboard internal input.\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\n     */\n    const { inputName = this.defaultName } = this.options;\n    this.input = {};\n    this.input[inputName] = \"\";\n\n    /**\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\n     */\n    this.keyboardDOMClass = keyboardDOMClass;\n\n    /**\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\n     */\n    this.buttonElements = {};\n\n    /**\n     * Simple-keyboard Instances\n     * This enables multiple simple-keyboard support with easier management\n     */\n    if (!(window as SKWindow)[\"SimpleKeyboardInstances\"])\n      (window as SKWindow)[\"SimpleKeyboardInstances\"] = {};\n\n    this.currentInstanceName = this.utilities.camelCase(this.keyboardDOMClass);\n    (window as SKWindow)[\"SimpleKeyboardInstances\"][this.currentInstanceName] = this;\n\n    /**\n     * Instance vars\n     */\n    this.allKeyboardInstances = (window as SKWindow)[\"SimpleKeyboardInstances\"];\n    this.keyboardInstanceNames = Object.keys((window as SKWindow)[\"SimpleKeyboardInstances\"]);\n    this.isFirstKeyboardInstance =\n      this.keyboardInstanceNames[0] === this.currentInstanceName;\n\n    /**\n     * Physical Keyboard support\n     */\n    this.physicalKeyboard = new PhysicalKeyboard({\n      dispatch: this.dispatch,\n      getOptions: this.getOptions,\n    });\n\n    /**\n     * Initializing CandidateBox\n     */\n    this.candidateBox = this.options.enableLayoutCandidates\n      ? new CandidateBox({\n          utilities: this.utilities,\n          options: this.options,\n        })\n      : null;\n\n    /**\n     * Rendering keyboard\n     */\n    if (this.keyboardDOM) this.render();\n    else {\n      console.warn(`\".${keyboardDOMClass}\" was not found in the DOM.`);\n      throw new Error(\"KEYBOARD_DOM_ERROR\");\n    }\n\n    /**\n     * Modules\n     */\n    this.modules = {};\n    this.loadModules();\n  }\n\n  /**\n   * parseParams\n   */\n  handleParams = (\n    selectorOrOptions?: string | HTMLDivElement | KeyboardOptions,\n    keyboardOptions?: KeyboardOptions\n  ): {\n    keyboardDOMClass: string;\n    keyboardDOM: KeyboardElement;\n    options: Partial<KeyboardOptions | undefined>;\n  } => {\n    let keyboardDOMClass;\n    let keyboardDOM;\n    let options;\n\n    /**\n     * If first parameter is a string:\n     * Consider it as an element's class\n     */\n    if (typeof selectorOrOptions === \"string\") {\n      keyboardDOMClass = selectorOrOptions.split(\".\").join(\"\");\n      keyboardDOM = document.querySelector(\n        `.${keyboardDOMClass}`\n      ) as KeyboardElement;\n      options = keyboardOptions;\n\n      /**\n       * If first parameter is an KeyboardElement\n       * Consider it as the keyboard DOM element\n       */\n    } else if (selectorOrOptions instanceof HTMLDivElement) {\n      /**\n       * This element must have a class, otherwise throw\n       */\n      if (!selectorOrOptions.className) {\n        console.warn(\"Any DOM element passed as parameter must have a class.\");\n        throw new Error(\"KEYBOARD_DOM_CLASS_ERROR\");\n      }\n\n      keyboardDOMClass = selectorOrOptions.className.split(\" \")[0];\n      keyboardDOM = selectorOrOptions;\n      options = keyboardOptions;\n\n      /**\n       * Otherwise, search for .simple-keyboard DOM element\n       */\n    } else {\n      keyboardDOMClass = \"simple-keyboard\";\n      keyboardDOM = document.querySelector(\n        `.${keyboardDOMClass}`\n      ) as KeyboardElement;\n      options = selectorOrOptions;\n    }\n\n    return {\n      keyboardDOMClass,\n      keyboardDOM,\n      options,\n    };\n  };\n\n  /**\n   * Getters\n   */\n  getOptions = (): KeyboardOptions => this.options;\n  getCaretPosition = (): number | null => this.caretPosition;\n  getCaretPositionEnd = (): number | null => this.caretPositionEnd;\n\n  /**\n   * Changes the internal caret position\n   * @param {number} position The caret's start position\n   * @param {number} positionEnd The caret's end position\n   */\n  setCaretPosition(position: number | null, endPosition = position): void {\n    this.caretPosition = position;\n    this.caretPositionEnd = endPosition;\n  }\n\n  /**\n   * Retrieve the candidates for a given input\n   * @param input The input string to check\n   */\n  getInputCandidates(\n    input: string\n  ): { candidateKey: string; candidateValue: string } | Record<string, never> {\n    const {\n      layoutCandidates: layoutCandidatesObj,\n      layoutCandidatesCaseSensitiveMatch,\n    } = this.options;\n\n    if (!layoutCandidatesObj || typeof layoutCandidatesObj !== \"object\") {\n      return {};\n    }\n\n    const layoutCandidates = Object.keys(layoutCandidatesObj).filter(\n      (layoutCandidate: string) => {\n        const inputSubstr =\n          input.substring(0, this.getCaretPositionEnd() || 0) || input;\n        const regexp = new RegExp(\n          `${this.utilities.escapeRegex(layoutCandidate)}$`,\n          layoutCandidatesCaseSensitiveMatch ? \"g\" : \"gi\"\n        );\n        const matches = [...inputSubstr.matchAll(regexp)];\n        return !!matches.length;\n      }\n    );\n\n    if (layoutCandidates.length > 1) {\n      const candidateKey = layoutCandidates.sort(\n        (a, b) => b.length - a.length\n      )[0];\n      return {\n        candidateKey,\n        candidateValue: layoutCandidatesObj[candidateKey],\n      };\n    } else if (layoutCandidates.length) {\n      const candidateKey = layoutCandidates[0];\n      return {\n        candidateKey,\n        candidateValue: layoutCandidatesObj[candidateKey],\n      };\n    } else {\n      return {};\n    }\n  }\n\n  /**\n   * Shows a suggestion box with a list of candidate words\n   * @param candidates The chosen candidates string as defined in the layoutCandidates option\n   * @param targetElement The element next to which the candidates box will be shown\n   */\n  showCandidatesBox(\n    candidateKey: string,\n    candidateValue: string,\n    targetElement: KeyboardElement\n  ): void {\n    if (this.candidateBox) {\n      this.candidateBox.show({\n        candidateValue,\n        targetElement,\n        onSelect: (selectedCandidate: string, e: MouseEvent) => {\n          const {\n            layoutCandidatesCaseSensitiveMatch,\n            disableCandidateNormalization,\n            enableLayoutCandidatesKeyPress\n          } = this.options;\n\n          let candidateStr = selectedCandidate;\n\n          if(!disableCandidateNormalization) {\n            /**\n             * Making sure that our suggestions are not composed characters\n             */\n            candidateStr = selectedCandidate.normalize(\"NFD\");\n          }\n\n          /**\n           * Perform an action before any input change\n           */\n          if (typeof this.options.beforeInputUpdate === \"function\") {\n            this.options.beforeInputUpdate(this);\n          }\n\n          const currentInput = this.getInput(this.options.inputName, true);\n          const initialCaretPosition = this.getCaretPositionEnd() || 0;\n          const inputSubstr =\n            currentInput.substring(0, initialCaretPosition || 0) ||\n            currentInput;\n\n          const regexp = new RegExp(\n            `${this.utilities.escapeRegex(candidateKey)}$`,\n            layoutCandidatesCaseSensitiveMatch ? \"g\" : \"gi\"\n          );\n          const newInputSubstr = inputSubstr.replace(\n            regexp,\n            candidateStr\n          );\n          const newInput = currentInput.replace(inputSubstr, newInputSubstr);\n\n          const caretPositionDiff = newInputSubstr.length - inputSubstr.length;\n          let newCaretPosition =\n            (initialCaretPosition || currentInput.length) + caretPositionDiff;\n\n          if (newCaretPosition < 0) newCaretPosition = 0;\n\n          this.setInput(newInput, this.options.inputName, true);\n          this.setCaretPosition(newCaretPosition);\n\n          /**\n           * Calling onKeyPress\n           * We pass in the composed candidate instead of the decomposed one\n           * To prevent confusion for users\n           */\n          if (enableLayoutCandidatesKeyPress && typeof this.options.onKeyPress === \"function\")\n            this.options.onKeyPress(selectedCandidate, e);\n\n          if (typeof this.options.onChange === \"function\")\n            this.options.onChange(\n              this.getInput(this.options.inputName, true),\n              e\n            );\n\n          /**\n           * Calling onChangeAll\n           */\n          if (typeof this.options.onChangeAll === \"function\")\n            this.options.onChangeAll(this.getAllInputs(), e);\n        },\n      });\n    }\n  }\n\n  /**\n   * Handles clicks made to keyboard buttons\n   * @param  {string} button The button's layout name.\n   */\n  handleButtonClicked(button: string, e?: KeyboardHandlerEvent): void {\n    const { inputName = this.defaultName, debug } = this.options;\n    /**\n     * Ignoring placeholder buttons\n     */\n    if (button === \"{//}\") return;\n\n    /**\n     * Creating inputName if it doesn't exist\n     */\n    if (!this.input[inputName]) this.input[inputName] = \"\";\n\n    /**\n     * Perform an action before any input change\n     */\n    if (typeof this.options.beforeInputUpdate === \"function\") {\n      this.options.beforeInputUpdate(this);\n    }\n\n    /**\n     * Calculating new input\n     */\n    const updatedInput = this.utilities.getUpdatedInput(\n      button,\n      this.input[inputName],\n      this.caretPosition,\n      this.caretPositionEnd\n    );\n\n    /**\n     * EDGE CASE: Check for whole input selection changes that will yield same updatedInput\n     */\n    if (this.utilities.isStandardButton(button) && this.activeInputElement) {\n      const isEntireInputSelection =\n        this.input[inputName] &&\n        this.input[inputName] === updatedInput &&\n        this.caretPosition === 0 &&\n        this.caretPositionEnd === updatedInput.length;\n\n      if (isEntireInputSelection) {\n        this.setInput(\"\", this.options.inputName, true);\n        this.setCaretPosition(0);\n        this.activeInputElement.value = \"\";\n        this.activeInputElement.setSelectionRange(0, 0);\n        this.handleButtonClicked(button, e);\n        return;\n      }\n    }\n\n    /**\n     * Calling onKeyPress\n     */\n    if (typeof this.options.onKeyPress === \"function\")\n      this.options.onKeyPress(button, e);\n\n    if (\n      // If input will change as a result of this button press\n      this.input[inputName] !== updatedInput &&\n      // This pertains to the \"inputPattern\" option:\n      // If inputPattern isn't set\n      (!this.options.inputPattern ||\n        // Or, if it is set and if the pattern is valid - we proceed.\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\n    ) {\n      /**\n       * If maxLength and handleMaxLength yield true, halting\n       */\n      if (\n        this.options.maxLength &&\n        this.utilities.handleMaxLength(this.input, updatedInput)\n      ) {\n        return;\n      }\n\n      /**\n       * Updating input\n       */\n      const newInputValue = this.utilities.getUpdatedInput(\n        button,\n        this.input[inputName],\n        this.caretPosition,\n        this.caretPositionEnd,\n        true\n      );\n\n      this.setInput(newInputValue, this.options.inputName, true);\n\n      if (debug) console.log(\"Input changed:\", this.getAllInputs());\n\n      if (this.options.debug) {\n        console.log(\n          \"Caret at: \",\n          this.getCaretPosition(),\n          this.getCaretPositionEnd(),\n          `(${this.keyboardDOMClass})`,\n          e?.type\n        );\n      }\n\n      /**\n       * Enforce syncInstanceInputs, if set\n       */\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs();\n\n      /**\n       * Calling onChange\n       */\n      if (typeof this.options.onChange === \"function\")\n        this.options.onChange(this.getInput(this.options.inputName, true), e);\n\n      /**\n       * Calling onChangeAll\n       */\n      if (typeof this.options.onChangeAll === \"function\")\n        this.options.onChangeAll(this.getAllInputs(), e);\n\n      /**\n       * Check if this new input has candidates (suggested words)\n       */\n      if (e?.target && this.options.enableLayoutCandidates) {\n        const { candidateKey, candidateValue } =\n          this.getInputCandidates(updatedInput);\n\n        if (candidateKey && candidateValue) {\n          this.showCandidatesBox(\n            candidateKey,\n            candidateValue,\n            this.keyboardDOM\n          );\n        } else {\n          this.candidateBox?.destroy();\n        }\n      }\n    }\n\n    /**\n     * After a button is clicked the selection (if any) will disappear\n     * we should reflect this in our state, as applicable\n     */\n    if(this.caretPositionEnd && this.caretPosition !== this.caretPositionEnd){\n      this.setCaretPosition(this.caretPositionEnd, this.caretPositionEnd);\n\n      if(this.activeInputElement){\n        this.activeInputElement.setSelectionRange(this.caretPositionEnd, this.caretPositionEnd);\n      }\n      \n      if(this.options.debug){\n        console.log(\"Caret position aligned\", this.caretPosition);\n      }\n    }\n\n    if (debug) {\n      console.log(\"Key pressed:\", button);\n    }\n  }\n\n  /**\n   * Get mouse hold state\n   */\n  getMouseHold() {\n    return this.isMouseHold;\n  }\n\n  /**\n   * Mark mouse hold state as set\n   */\n  setMouseHold(value: boolean) {\n    if (this.options.syncInstanceInputs) {\n      this.dispatch((instance: SimpleKeyboard) => {\n        instance.isMouseHold = value;\n      });\n    } else {\n      this.isMouseHold = value;\n    }\n  }\n\n  /**\n   * Handles button mousedown\n   */\n  /* istanbul ignore next */\n  handleButtonMouseDown(button: string, e: KeyboardHandlerEvent): void {\n    if (e) {\n      /**\n       * Handle event options\n       */\n      if (this.options.preventMouseDownDefault) e.preventDefault();\n      if (this.options.stopMouseDownPropagation) e.stopPropagation();\n\n      /**\n       * Add active class\n       */\n      e.target.classList.add(this.activeButtonClass);\n    }\n\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\n\n    /**\n     * @type {boolean} Whether the mouse is being held onKeyPress\n     */\n    this.setMouseHold(true);\n\n    /**\n     * @type {object} Time to wait until a key hold is detected\n     */\n    if (!this.options.disableButtonHold) {\n      this.holdTimeout = window.setTimeout(() => {\n        if (\n          (this.getMouseHold() &&\n            // TODO: This needs to be configurable through options\n            ((!button.includes(\"{\") && !button.includes(\"}\")) ||\n              button === \"{delete}\" ||\n              button === \"{backspace}\" ||\n              button === \"{bksp}\" ||\n              button === \"{space}\" ||\n              button === \"{tab}\")) ||\n          button === \"{arrowright}\" ||\n          button === \"{arrowleft}\" ||\n          button === \"{arrowup}\" ||\n          button === \"{arrowdown}\"\n        ) {\n          if (this.options.debug) console.log(\"Button held:\", button);\n\n          this.handleButtonHold(button);\n        }\n        clearTimeout(this.holdTimeout);\n      }, 500);\n    }\n  }\n\n  /**\n   * Handles button mouseup\n   */\n  handleButtonMouseUp(button?: string, e?: KeyboardHandlerEvent): void {\n    if (e) {\n      /**\n       * Handle event options\n       */\n      if (this.options.preventMouseUpDefault && e.preventDefault)\n        e.preventDefault();\n      if (this.options.stopMouseUpPropagation && e.stopPropagation)\n        e.stopPropagation();\n\n      /* istanbul ignore next */\n      const isKeyboard =\n        e.target === this.keyboardDOM ||\n        (e.target && this.keyboardDOM.contains(e.target)) ||\n        (this.candidateBox &&\n          this.candidateBox.candidateBoxElement &&\n          (e.target === this.candidateBox.candidateBoxElement ||\n            (e.target &&\n              this.candidateBox.candidateBoxElement.contains(e.target))));\n\n      /**\n       * On click outside, remove candidateBox\n       */\n      if (!isKeyboard && this.candidateBox) {\n        this.candidateBox.destroy();\n      }\n    }\n\n    /**\n     * Remove active class\n     */\n    this.recurseButtons((buttonElement: Element) => {\n      buttonElement.classList.remove(this.activeButtonClass);\n    });\n\n    this.setMouseHold(false);\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\n\n    /**\n     * Calling onKeyReleased\n     */\n    if (button && typeof this.options.onKeyReleased === \"function\")\n      this.options.onKeyReleased(button, e);\n  }\n\n  /**\n   * Handles container mousedown\n   */\n  handleKeyboardContainerMouseDown(e: KeyboardHandlerEvent): void {\n    /**\n     * Handle event options\n     */\n    if (this.options.preventMouseDownDefault) e.preventDefault();\n  }\n\n  /**\n   * Handles button hold\n   */\n  /* istanbul ignore next */\n  handleButtonHold(button: string): void {\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\n\n    /**\n     * @type {object} Timeout dictating the speed of key hold iterations\n     */\n    this.holdInteractionTimeout = window.setTimeout(() => {\n      if (this.getMouseHold()) {\n        this.handleButtonClicked(button);\n        this.handleButtonHold(button);\n      } else {\n        clearTimeout(this.holdInteractionTimeout);\n      }\n    }, 100);\n  }\n\n  /**\n   * Send a command to all simple-keyboard instances (if you have several instances).\n   */\n  syncInstanceInputs(): void {\n    this.dispatch((instance: SimpleKeyboard) => {\n      instance.replaceInput(this.input);\n      instance.setCaretPosition(this.caretPosition, this.caretPositionEnd);\n    });\n  }\n\n  /**\n   * Clear the keyboard’s input.\n   * @param {string} [inputName] optional - the internal input to select\n   */\n  clearInput(\n    inputName: string = this.options.inputName || this.defaultName\n  ): void {\n    this.input[inputName] = \"\";\n\n    /**\n     * Reset caretPosition\n     */\n    this.setCaretPosition(0);\n\n    /**\n     * Enforce syncInstanceInputs, if set\n     */\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs();\n  }\n\n  /**\n   * Get the keyboard’s input (You can also get it from the onChange prop).\n   * @param  {string} [inputName] optional - the internal input to select\n   */\n  getInput(\n    inputName: string = this.options.inputName || this.defaultName,\n    skipSync = false\n  ): string {\n    /**\n     * Enforce syncInstanceInputs, if set\n     */\n    if (this.options.syncInstanceInputs && !skipSync) this.syncInstanceInputs();\n\n    if (this.options.rtl) {\n      // Remove existing control chars\n      const inputWithoutRTLControl = this.input[inputName]\n        .replace(\"\\u202B\", \"\")\n        .replace(\"\\u202C\", \"\");\n\n      return \"\\u202B\" + inputWithoutRTLControl + \"\\u202C\";\n    } else {\n      return this.input[inputName];\n    }\n  }\n\n  /**\n   * Get all simple-keyboard inputs\n   */\n  getAllInputs(): KeyboardInput {\n    const output = {} as KeyboardInput;\n    const inputNames = Object.keys(this.input);\n\n    inputNames.forEach((inputName) => {\n      output[inputName] = this.getInput(inputName, true);\n    });\n\n    return output;\n  }\n\n  /**\n   * Set the keyboard’s input.\n   * @param  {string} input the input value\n   * @param  {string} inputName optional - the internal input to select\n   */\n  setInput(\n    input: string,\n    inputName: string = this.options.inputName || this.defaultName,\n    skipSync?: boolean\n  ): void {\n    this.input[inputName] = input;\n\n    /**\n     * Enforce syncInstanceInputs, if set\n     */\n    if (!skipSync && this.options.syncInstanceInputs) this.syncInstanceInputs();\n  }\n\n  /**\n   * Replace the input object (`keyboard.input`)\n   * @param  {object} inputObj The input object\n   */\n  replaceInput(inputObj: KeyboardInput): void {\n    this.input = inputObj;\n  }\n\n  /**\n   * Set new option or modify existing ones after initialization.\n   * @param  {object} options The options to set\n   */\n  setOptions(options = {}): void {\n    const changedOptions = this.changedOptions(options);\n    this.options = Object.assign(this.options, options);\n\n    if (changedOptions.length) {\n      if (this.options.debug) {\n        console.log(\"changedOptions\", changedOptions);\n      }\n\n      /**\n       * Some option changes require adjustments before re-render\n       */\n      this.onSetOptions(changedOptions);\n\n      /**\n       * Rendering\n       */\n      this.render();\n    }\n  }\n\n  /**\n   * Detecting changes to non-function options\n   * This allows us to ascertain whether a button re-render is needed\n   */\n  changedOptions(newOptions: Partial<KeyboardOptions>): string[] {\n    return Object.keys(newOptions).filter(\n      (optionName) =>\n        JSON.stringify(newOptions[optionName]) !==\n        JSON.stringify(this.options[optionName])\n    );\n  }\n\n  /**\n   * Executing actions depending on changed options\n   * @param  {object} options The options to set\n   */\n  onSetOptions(changedOptions: string[] = []): void {\n    /**\n     * Changed: layoutName\n     */\n    if (changedOptions.includes(\"layoutName\")) {\n      /**\n       * Reset candidateBox\n       */\n      if (this.candidateBox) {\n        this.candidateBox.destroy();\n      }\n    }\n\n    /**\n     * Changed: layoutCandidatesPageSize, layoutCandidates\n     */\n    if (\n      changedOptions.includes(\"layoutCandidatesPageSize\") ||\n      changedOptions.includes(\"layoutCandidates\")\n    ) {\n      /**\n       * Reset and recreate candidateBox\n       */\n      if (this.candidateBox) {\n        this.candidateBox.destroy();\n        this.candidateBox = new CandidateBox({\n          utilities: this.utilities,\n          options: this.options,\n        });\n      }\n    }\n  }\n\n  /**\n   * Remove all keyboard rows and reset keyboard values.\n   * Used internally between re-renders.\n   */\n  resetRows(): void {\n    if (this.keyboardRowsDOM) {\n      this.keyboardRowsDOM.remove();\n    }\n\n    this.keyboardDOM.className = this.keyboardDOMClass;\n    this.keyboardDOM.setAttribute(\"data-skInstance\", this.currentInstanceName);\n    this.buttonElements = {};\n  }\n\n  /**\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\n   */\n  // eslint-disable-next-line no-unused-vars\n  dispatch(callback: (instance: SimpleKeyboard, key?: string) => void): void {\n    if (!(window as SKWindow)[\"SimpleKeyboardInstances\"]) {\n      console.warn(\n        `SimpleKeyboardInstances is not defined. Dispatch cannot be called.`\n      );\n      throw new Error(\"INSTANCES_VAR_ERROR\");\n    }\n\n    return Object.keys((window as SKWindow)[\"SimpleKeyboardInstances\"]).forEach((key) => {\n      callback((window as SKWindow)[\"SimpleKeyboardInstances\"][key], key);\n    });\n  }\n\n  /**\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\n   * @param  {string} buttons List of buttons to select (separated by a space).\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\n   */\n  addButtonTheme(buttons: string, className: string): void {\n    if (!className || !buttons) return;\n\n    buttons.split(\" \").forEach((button) => {\n      className.split(\" \").forEach((classNameItem) => {\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\n\n        let classNameFound = false;\n\n        /**\n         * If class is already defined, we add button to class definition\n         */\n        this.options.buttonTheme.map((buttonTheme) => {\n          if (buttonTheme?.class.split(\" \").includes(classNameItem)) {\n            classNameFound = true;\n\n            const buttonThemeArray = buttonTheme.buttons.split(\" \");\n            if (!buttonThemeArray.includes(button)) {\n              classNameFound = true;\n              buttonThemeArray.push(button);\n              buttonTheme.buttons = buttonThemeArray.join(\" \");\n            }\n          }\n          return buttonTheme;\n        });\n\n        /**\n         * If class is not defined, we create a new entry\n         */\n        if (!classNameFound) {\n          this.options.buttonTheme.push({\n            class: classNameItem,\n            buttons: buttons,\n          });\n        }\n      });\n    });\n\n    this.render();\n  }\n\n  /**\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\n   * @param  {string} buttons List of buttons to select (separated by a space).\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\n   */\n  removeButtonTheme(buttons: string, className: string): void {\n    /**\n     * When called with empty parameters, remove all button themes\n     */\n    if (!buttons && !className) {\n      this.options.buttonTheme = [];\n      this.render();\n      return;\n    }\n\n    /**\n     * If buttons are passed and buttonTheme has items\n     */\n    if (\n      buttons &&\n      Array.isArray(this.options.buttonTheme) &&\n      this.options.buttonTheme.length\n    ) {\n      const buttonArray = buttons.split(\" \");\n      buttonArray.forEach((button) => {\n        this.options?.buttonTheme?.map((buttonTheme, index) => {\n          /**\n           * If className is set, we affect the buttons only for that class\n           * Otherwise, we afect all classes\n           */\n          if (\n            (buttonTheme &&\n              className &&\n              className.includes(buttonTheme.class)) ||\n            !className\n          ) {\n            const filteredButtonArray = buttonTheme?.buttons\n              .split(\" \")\n              .filter((item) => item !== button);\n\n            /**\n             * If buttons left, return them, otherwise, remove button Theme\n             */\n            if (buttonTheme && filteredButtonArray?.length) {\n              buttonTheme.buttons = filteredButtonArray.join(\" \");\n            } else {\n              this.options.buttonTheme?.splice(index, 1);\n              buttonTheme = null;\n            }\n          }\n\n          return buttonTheme;\n        });\n      });\n\n      this.render();\n    }\n  }\n\n  /**\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\n   * @param  {string} button The button layout name to select\n   */\n  getButtonElement(\n    button: string\n  ): KeyboardElement | KeyboardElement[] | undefined {\n    let output;\n\n    const buttonArr = this.buttonElements[button];\n    if (buttonArr) {\n      if (buttonArr.length > 1) {\n        output = buttonArr;\n      } else {\n        output = buttonArr[0];\n      }\n    }\n\n    return output;\n  }\n\n  /**\n   * This handles the \"inputPattern\" option\n   * by checking if the provided inputPattern passes\n   */\n  inputPatternIsValid(inputVal: string): boolean {\n    const inputPatternRaw = this.options.inputPattern;\n    let inputPattern;\n\n    /**\n     * Check if input pattern is global or targeted to individual inputs\n     */\n    if (inputPatternRaw instanceof RegExp) {\n      inputPattern = inputPatternRaw;\n    } else {\n      inputPattern =\n        inputPatternRaw[this.options.inputName || this.defaultName];\n    }\n\n    if (inputPattern && inputVal) {\n      const didInputMatch = inputPattern.test(inputVal);\n\n      if (this.options.debug) {\n        console.log(\n          `inputPattern (\"${inputPattern}\"): ${\n            didInputMatch ? \"passed\" : \"did not pass!\"\n          }`\n        );\n      }\n\n      return didInputMatch;\n    } else {\n      /**\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\n       */\n      return true;\n    }\n  }\n\n  /**\n   * Handles simple-keyboard event listeners\n   */\n  setEventListeners(): void {\n    /**\n     * Only first instance should set the event listeners\n     */\n    if (this.isFirstKeyboardInstance || !this.allKeyboardInstances) {\n      if (this.options.debug) {\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\n      }\n\n      const { physicalKeyboardHighlightPreventDefault = false } = this.options;\n\n      /**\n       * Event Listeners\n       */\n      document.addEventListener(\"keyup\", this.handleKeyUp, physicalKeyboardHighlightPreventDefault);\n      document.addEventListener(\"keydown\", this.handleKeyDown, physicalKeyboardHighlightPreventDefault);\n      document.addEventListener(\"mouseup\", this.handleMouseUp);\n      document.addEventListener(\"touchend\", this.handleTouchEnd);\n\n      if (this.options.updateCaretOnSelectionChange) {\n        document.addEventListener(\"selectionchange\", this.handleSelectionChange);\n      }\n\n      document.addEventListener(\"select\", this.handleSelect);\n    }\n  }\n\n  /**\n   * Event Handler: KeyUp\n   */\n  handleKeyUp(event: KeyboardHandlerEvent): void {\n    this.caretEventHandler(event);\n\n    if (this.options.physicalKeyboardHighlight) {\n      this.physicalKeyboard.handleHighlightKeyUp(event);\n    }\n  }\n\n  /**\n   * Event Handler: KeyDown\n   */\n  handleKeyDown(event: KeyboardHandlerEvent): void {\n    if (this.options.physicalKeyboardHighlight) {\n      this.physicalKeyboard.handleHighlightKeyDown(event);\n    }\n  }\n\n  /**\n   * Event Handler: MouseUp\n   */\n  handleMouseUp(event: KeyboardHandlerEvent): void {\n    this.caretEventHandler(event);\n  }\n\n  /**\n   * Event Handler: TouchEnd\n   */\n  /* istanbul ignore next */\n  handleTouchEnd(event: KeyboardHandlerEvent): void {\n    this.caretEventHandler(event);\n  }\n\n  /**\n   * Event Handler: Select\n   */\n  /* istanbul ignore next */\n  handleSelect(event: KeyboardHandlerEvent): void {\n    this.caretEventHandler(event);\n  }\n\n  /**\n   * Event Handler: SelectionChange\n   */\n  /* istanbul ignore next */\n  handleSelectionChange(event: KeyboardHandlerEvent): void {\n    /**\n     * Firefox is not reporting the correct caret position through this event\n     * https://github.com/hodgef/simple-keyboard/issues/1839\n     */\n    if(navigator.userAgent.includes('Firefox')){\n      return;\n    }\n    this.caretEventHandler(event);\n  }\n\n  /**\n   * Called by {@link setEventListeners} when an event that warrants a cursor position update is triggered\n   */\n  caretEventHandler(event: KeyboardHandlerEvent): void {\n    let targetTagName: string;\n    if (event.target.tagName) {\n      targetTagName = event.target.tagName.toLowerCase();\n    }\n\n    this.dispatch((instance) => {\n      let isKeyboard =\n        event.target === instance.keyboardDOM ||\n        (event.target && instance.keyboardDOM.contains(event.target));\n\n      /**\n       * If syncInstanceInputs option is enabled, make isKeyboard match any instance\n       * not just the current one\n       */\n      if (this.options.syncInstanceInputs && Array.isArray(event.path)) {\n        isKeyboard = event.path.some((item: HTMLElement) =>\n          item?.hasAttribute?.(\"data-skInstance\")\n        );\n      }\n\n      if (\n        (targetTagName === \"textarea\" ||\n          (targetTagName === \"input\" &&\n            [\"text\", \"search\", \"url\", \"tel\", \"password\"].includes(\n              event.target.type\n            ))) &&\n        !instance.options.disableCaretPositioning\n      ) {\n        /**\n         * Tracks current cursor position\n         * As keys are pressed, text will be added/removed at that position within the input.\n         */\n        let selectionStart = event.target.selectionStart;\n        let selectionEnd = event.target.selectionEnd;\n\n        if(instance.options.rtl){\n          selectionStart = instance.utilities.getRtlOffset(selectionStart, instance.getInput());\n          selectionEnd = instance.utilities.getRtlOffset(selectionEnd, instance.getInput());\n        }\n\n        instance.setCaretPosition(selectionStart, selectionEnd);\n\n        /**\n         * Tracking current input in order to handle caret positioning edge cases\n         */\n        instance.activeInputElement = event.target;\n\n        if (instance.options.debug) {\n          console.log(\n            \"Caret at: \",\n            instance.getCaretPosition(),\n            instance.getCaretPositionEnd(),\n            event && event.target.tagName.toLowerCase(),\n            `(${instance.keyboardDOMClass})`,\n            event?.type\n          );\n        }\n      } else if (\n        (instance.options.disableCaretPositioning || !isKeyboard) &&\n        event?.type !== \"selectionchange\"\n      ) {\n        /**\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\n         */\n        instance.setCaretPosition(null);\n\n        /**\n         * Resetting activeInputElement\n         */\n        instance.activeInputElement = null;\n\n        if (instance.options.debug) {\n          console.log(\n            `Caret position reset due to \"${event?.type}\" event`,\n            event\n          );\n        }\n      }\n    });\n  }\n\n  /**\n   * Execute an operation on each button\n   */\n  recurseButtons(fn: any): void {\n    if (!fn) return;\n\n    Object.keys(this.buttonElements).forEach((buttonName) =>\n      this.buttonElements[buttonName].forEach(fn)\n    );\n  }\n\n  /**\n   * Destroy keyboard listeners and DOM elements\n   */\n  destroy(): void {\n    if (this.options.debug)\n      console.log(\n        `Destroying simple-keyboard instance: ${this.currentInstanceName}`\n      );\n\n    const { physicalKeyboardHighlightPreventDefault = false } = this.options;\n\n    /**\n     * Remove document listeners\n     */\n    document.removeEventListener(\"keyup\", this.handleKeyUp, physicalKeyboardHighlightPreventDefault);\n    document.removeEventListener(\"keydown\", this.handleKeyDown, physicalKeyboardHighlightPreventDefault);\n    document.removeEventListener(\"mouseup\", this.handleMouseUp);\n    document.removeEventListener(\"touchend\", this.handleTouchEnd);\n    document.removeEventListener(\"select\", this.handleSelect);\n\n    // selectionchange is causing caret update issues on Chrome\n    // https://github.com/hodgef/simple-keyboard/issues/2346\n    if (this.options.updateCaretOnSelectionChange) {\n      document.removeEventListener(\"selectionchange\", this.handleSelectionChange);\n    }\n\n    document.onpointerup = null;\n    document.ontouchend = null;\n    document.ontouchcancel = null;\n    document.onmouseup = null;\n\n    /**\n     * Remove buttons\n     */\n    const deleteButton = (buttonElement: KeyboardElement | null) => {\n      if (buttonElement) {\n        buttonElement.onpointerdown = null;\n        buttonElement.onpointerup = null;\n        buttonElement.onpointercancel = null;\n        buttonElement.ontouchstart = null;\n        buttonElement.ontouchend = null;\n        buttonElement.ontouchcancel = null;\n        buttonElement.onclick = null;\n        buttonElement.onmousedown = null;\n        buttonElement.onmouseup = null;\n\n        buttonElement.remove();\n        buttonElement = null;\n      }\n    };\n\n    this.recurseButtons(deleteButton);\n\n    /**\n     * Remove wrapper events\n     */\n    this.keyboardDOM.onpointerdown = null;\n    this.keyboardDOM.ontouchstart = null;\n    this.keyboardDOM.onmousedown = null;\n\n    /**\n     * Clearing keyboard rows\n     */\n    this.resetRows();\n\n    /**\n     * Candidate box\n     */\n    if (this.candidateBox) {\n      this.candidateBox.destroy();\n      this.candidateBox = null;\n    }\n\n    /**\n     * Clearing activeInputElement\n     */\n    this.activeInputElement = null;\n\n    /**\n     * Removing instance attribute\n     */\n    this.keyboardDOM.removeAttribute(\"data-skInstance\");\n\n    /**\n     * Clearing keyboardDOM\n     */\n    this.keyboardDOM.innerHTML = \"\";\n\n    /**\n     * Remove instance\n     */\n    (window as SKWindow)[\"SimpleKeyboardInstances\"][this.currentInstanceName] = null;\n    delete (window as SKWindow)[\"SimpleKeyboardInstances\"][this.currentInstanceName];\n\n    /**\n     * Reset initialized flag\n     */\n    this.initialized = false;\n  }\n\n  /**\n   * Process buttonTheme option\n   */\n  getButtonThemeClasses(button: string): string[] {\n    const buttonTheme = this.options.buttonTheme;\n    let buttonClasses: string[] = [];\n\n    if (Array.isArray(buttonTheme)) {\n      buttonTheme.forEach((themeObj) => {\n        if (\n          themeObj &&\n          themeObj.class &&\n          typeof themeObj.class === \"string\" &&\n          themeObj.buttons &&\n          typeof themeObj.buttons === \"string\"\n        ) {\n          const themeObjClasses = themeObj.class.split(\" \");\n          const themeObjButtons = themeObj.buttons.split(\" \");\n\n          if (themeObjButtons.includes(button)) {\n            buttonClasses = [...buttonClasses, ...themeObjClasses];\n          }\n        } else {\n          console.warn(\n            `Incorrect \"buttonTheme\". Please check the documentation.`,\n            themeObj\n          );\n        }\n      });\n    }\n\n    return buttonClasses;\n  }\n\n  /**\n   * Process buttonAttributes option\n   */\n  setDOMButtonAttributes(button: string, callback: any): void {\n    const buttonAttributes = this.options.buttonAttributes;\n\n    if (Array.isArray(buttonAttributes)) {\n      buttonAttributes.forEach((attrObj) => {\n        if (\n          attrObj.attribute &&\n          typeof attrObj.attribute === \"string\" &&\n          attrObj.value &&\n          typeof attrObj.value === \"string\" &&\n          attrObj.buttons &&\n          typeof attrObj.buttons === \"string\"\n        ) {\n          const attrObjButtons = attrObj.buttons.split(\" \");\n\n          if (attrObjButtons.includes(button)) {\n            callback(attrObj.attribute, attrObj.value);\n          }\n        } else {\n          console.warn(\n            `Incorrect \"buttonAttributes\". Please check the documentation.`,\n            attrObj\n          );\n        }\n      });\n    }\n  }\n\n  onTouchDeviceDetected() {\n    /**\n     * Processing autoTouchEvents\n     */\n    this.processAutoTouchEvents();\n\n    /**\n     * Disabling contextual window on touch devices\n     */\n    this.disableContextualWindow();\n  }\n\n  /**\n   * Disabling contextual window for hg-button\n   */\n  /* istanbul ignore next */\n  disableContextualWindow() {\n    window.oncontextmenu = (event: KeyboardHandlerEvent) => {\n      if (event.target.classList.contains(\"hg-button\")) {\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n      }\n    };\n  }\n\n  /**\n   * Process autoTouchEvents option\n   */\n  processAutoTouchEvents() {\n    if (this.options.autoUseTouchEvents) {\n      this.options.useTouchEvents = true;\n\n      if (this.options.debug) {\n        console.log(\n          `autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`\n        );\n      }\n    }\n  }\n\n  /**\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\n   */\n  onInit() {\n    if (this.options.debug) {\n      console.log(`${this.keyboardDOMClass} Initialized`);\n    }\n\n    /**\n     * setEventListeners\n     */\n    this.setEventListeners();\n\n    if (typeof this.options.onInit === \"function\") this.options.onInit(this);\n  }\n\n  /**\n   * Executes the callback function before a simple-keyboard render.\n   */\n  beforeFirstRender() {\n    /**\n     * Performing actions when touch device detected\n     */\n    if (this.utilities.isTouchDevice()) {\n      this.onTouchDeviceDetected();\n    }\n\n    if (typeof this.options.beforeFirstRender === \"function\")\n      this.options.beforeFirstRender(this);\n\n    /**\n     * Notify about PointerEvents usage\n     */\n    if (\n      this.isFirstKeyboardInstance &&\n      this.utilities.pointerEventsSupported() &&\n      !this.options.useTouchEvents &&\n      !this.options.useMouseEvents\n    ) {\n      if (this.options.debug) {\n        console.log(\"Using PointerEvents as it is supported by this browser\");\n      }\n    }\n\n    /**\n     * Notify about touch events usage\n     */\n    if (this.options.useTouchEvents) {\n      if (this.options.debug) {\n        console.log(\n          \"useTouchEvents has been enabled. Only touch events will be used.\"\n        );\n      }\n    }\n  }\n\n  /**\n   * Executes the callback function before a simple-keyboard render.\n   */\n  beforeRender() {\n    if (typeof this.options.beforeRender === \"function\")\n      this.options.beforeRender(this);\n  }\n\n  /**\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\n   */\n  onRender() {\n    if (typeof this.options.onRender === \"function\")\n      this.options.onRender(this);\n  }\n\n  /**\n   * Executes the callback function once all modules have been loaded\n   */\n  onModulesLoaded() {\n    if (typeof this.options.onModulesLoaded === \"function\")\n      this.options.onModulesLoaded(this);\n  }\n\n  /**\n   * Register module\n   */\n  registerModule = (name: string, initCallback: any) => {\n    if (!this.modules[name]) this.modules[name] = {};\n\n    initCallback(this.modules[name]);\n  };\n\n  /**\n   * Load modules\n   */\n  loadModules() {\n    if (Array.isArray(this.options.modules)) {\n      this.options.modules.forEach((KeyboardModule) => {\n        const keyboardModule = new KeyboardModule(this);\n        keyboardModule.init && keyboardModule.init(this);\n      });\n\n      this.keyboardPluginClasses = \"modules-loaded\";\n\n      this.render();\n      this.onModulesLoaded();\n    }\n  }\n\n  /**\n   * Get module prop\n   */\n  getModuleProp(name: string, prop: string) {\n    if (!this.modules[name]) return false;\n\n    return this.modules[name][prop];\n  }\n\n  /**\n   * getModulesList\n   */\n  getModulesList() {\n    return Object.keys(this.modules);\n  }\n\n  /**\n   * Parse Row DOM containers\n   */\n  parseRowDOMContainers(\n    rowDOM: HTMLDivElement,\n    rowIndex: number,\n    containerStartIndexes: number[],\n    containerEndIndexes: number[]\n  ) {\n    const rowDOMArray = Array.from(rowDOM.children);\n    let removedElements = 0;\n\n    if (rowDOMArray.length) {\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\n        const endIndex = containerEndIndexes[arrIndex];\n\n        /**\n         * If there exists a respective end index\n         * if end index comes after start index\n         */\n        if (!endIndex || !(endIndex > startIndex)) {\n          return false;\n        }\n\n        /**\n         * Updated startIndex, endIndex\n         * This is since the removal of buttons to place a single button container\n         * results in a modified array size\n         */\n        const updated_startIndex = startIndex - removedElements;\n        const updated_endIndex = endIndex - removedElements;\n\n        /**\n         * Create button container\n         */\n        const containerDOM = document.createElement(\"div\");\n        containerDOM.className += \"hg-button-container\";\n        const containerUID = `${this.options.layoutName}-r${rowIndex}c${arrIndex}`;\n        containerDOM.setAttribute(\"data-skUID\", containerUID);\n\n        /**\n         * Taking elements due to be inserted into container\n         */\n        const containedElements = rowDOMArray.splice(\n          updated_startIndex,\n          updated_endIndex - updated_startIndex + 1\n        );\n        removedElements = updated_endIndex - updated_startIndex;\n\n        /**\n         * Inserting elements to container\n         */\n        containedElements.forEach((element) =>\n          containerDOM.appendChild(element)\n        );\n\n        /**\n         * Adding container at correct position within rowDOMArray\n         */\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\n\n        /**\n         * Clearing old rowDOM children structure\n         */\n        rowDOM.innerHTML = \"\";\n\n        /**\n         * Appending rowDOM new children list\n         */\n        rowDOMArray.forEach((element) => rowDOM.appendChild(element));\n\n        if (this.options.debug) {\n          console.log(\n            \"rowDOMContainer\",\n            containedElements,\n            updated_startIndex,\n            updated_endIndex,\n            removedElements + 1\n          );\n        }\n      });\n    }\n\n    return rowDOM;\n  }\n\n  /**\n   * getKeyboardClassString\n   */\n  getKeyboardClassString = (...baseDOMClasses: any[]) => {\n    const keyboardClasses = [this.keyboardDOMClass, ...baseDOMClasses].filter(\n      (DOMClass) => !!DOMClass\n    );\n\n    return keyboardClasses.join(\" \");\n  };\n\n  /**\n   * Renders rows and buttons as per options\n   */\n  render() {\n    /**\n     * Clear keyboard\n     */\n    this.resetRows();\n\n    /**\n     * Calling beforeFirstRender\n     */\n    if (!this.initialized) {\n      this.beforeFirstRender();\n    }\n\n    /**\n     * Calling beforeRender\n     */\n    this.beforeRender();\n\n    const layoutClass = `hg-layout-${this.options.layoutName}`;\n    const layout = this.options.layout || getDefaultLayout();\n    const useTouchEvents = this.options.useTouchEvents || false;\n    const useTouchEventsClass = useTouchEvents ? \"hg-touch-events\" : \"\";\n    const useMouseEvents = this.options.useMouseEvents || false;\n    const disableRowButtonContainers = this.options.disableRowButtonContainers;\n\n    /**\n     * Adding themeClass, layoutClass to keyboardDOM\n     */\n    this.keyboardDOM.className = this.getKeyboardClassString(\n      this.options.theme,\n      layoutClass,\n      this.keyboardPluginClasses,\n      useTouchEventsClass\n    );\n\n    /**\n     * Adding keyboard identifier\n     */\n    this.keyboardDOM.setAttribute(\"data-skInstance\", this.currentInstanceName);\n\n    /**\n     * Create row wrapper\n     */\n    this.keyboardRowsDOM = document.createElement(\"div\");\n    this.keyboardRowsDOM.className = \"hg-rows\";\n\n    /**\n     * Iterating through each row\n     */\n    layout[this.options.layoutName || this.defaultName].forEach(\n      (row: string, rIndex: number) => {\n        let rowArray = row.split(\" \");\n\n        /**\n         * Enforce excludeFromLayout\n         */\n        if (\n          this.options.excludeFromLayout &&\n          this.options.excludeFromLayout[\n            this.options.layoutName || this.defaultName\n          ]\n        ) {\n          rowArray = rowArray.filter(\n            (buttonName) =>\n              this.options.excludeFromLayout &&\n              !this.options.excludeFromLayout[\n                this.options.layoutName || this.defaultName\n              ].includes(buttonName)\n          );\n        }\n\n        /**\n         * Creating empty row\n         */\n        let rowDOM = document.createElement(\"div\");\n        rowDOM.className += \"hg-row\";\n\n        /**\n         * Tracking container indicators in rows\n         */\n        const containerStartIndexes: number[] = [];\n        const containerEndIndexes: number[] = [];\n\n        /**\n         * Iterating through each button in row\n         */\n        rowArray.forEach((button, bIndex) => {\n          /**\n           * Check if button has a container indicator\n           */\n          const buttonHasContainerStart =\n            !disableRowButtonContainers &&\n            typeof button === \"string\" &&\n            button.length > 1 &&\n            button.indexOf(\"[\") === 0;\n\n          const buttonHasContainerEnd =\n            !disableRowButtonContainers &&\n            typeof button === \"string\" &&\n            button.length > 1 &&\n            button.indexOf(\"]\") === button.length - 1;\n\n          /**\n           * Save container start index, if applicable\n           */\n          if (buttonHasContainerStart) {\n            containerStartIndexes.push(bIndex);\n\n            /**\n             * Removing indicator\n             */\n            button = button.replace(/\\[/g, \"\");\n          }\n\n          if (buttonHasContainerEnd) {\n            containerEndIndexes.push(bIndex);\n\n            /**\n             * Removing indicator\n             */\n            button = button.replace(/\\]/g, \"\");\n          }\n\n          /**\n           * Processing button options\n           */\n          const fctBtnClass = this.utilities.getButtonClass(button);\n          const buttonDisplayName = this.utilities.getButtonDisplayName(\n            button,\n            this.options.display,\n            this.options.mergeDisplay\n          );\n\n          /**\n           * Creating button\n           */\n          const buttonType = this.options.useButtonTag ? \"button\" : \"div\";\n          const buttonDOM = document.createElement(buttonType);\n          buttonDOM.className += `hg-button ${fctBtnClass}`;\n\n          /**\n           * Adding buttonTheme\n           */\n          buttonDOM.classList.add(...this.getButtonThemeClasses(button));\n\n          /**\n           * Adding buttonAttributes\n           */\n          this.setDOMButtonAttributes(\n            button,\n            (attribute: string, value: string) => {\n              buttonDOM.setAttribute(attribute, value);\n            }\n          );\n\n          this.activeButtonClass = \"hg-activeButton\";\n\n          /**\n           * Handle button click event\n           */\n          /* istanbul ignore next */\n          if (\n            this.utilities.pointerEventsSupported() &&\n            !useTouchEvents &&\n            !useMouseEvents\n          ) {\n            /**\n             * Handle PointerEvents\n             */\n            buttonDOM.onpointerdown = (e: KeyboardHandlerEvent) => {\n              this.handleButtonClicked(button, e);\n              this.handleButtonMouseDown(button, e);\n            };\n            buttonDOM.onpointerup = (e: KeyboardHandlerEvent) => {\n              this.handleButtonMouseUp(button, e);\n            };\n            buttonDOM.onpointercancel = (e: KeyboardHandlerEvent) => {\n              this.handleButtonMouseUp(button, e);\n            };\n          } else {\n            /**\n             * Fallback for browsers not supporting PointerEvents\n             */\n            if (useTouchEvents) {\n              /**\n               * Handle touch events\n               */\n              buttonDOM.ontouchstart = (e: KeyboardHandlerEvent) => {\n                this.handleButtonClicked(button, e);\n                this.handleButtonMouseDown(button, e);\n              };\n              buttonDOM.ontouchend = (e: KeyboardHandlerEvent) => {\n                this.handleButtonMouseUp(button, e);\n              };\n              buttonDOM.ontouchcancel = (e: KeyboardHandlerEvent) => {\n                this.handleButtonMouseUp(button, e);\n              };\n            } else {\n              /**\n               * Handle mouse events\n               */\n              buttonDOM.onclick = (e: KeyboardHandlerEvent) => {\n                this.setMouseHold(false);\n                /**\n                 * Fire button handler in onclick for compatibility reasons\n                 * This fires handler before onKeyReleased, therefore when that option is set we will fire the handler\n                 * in onmousedown instead\n                 */\n                if (typeof this.options.onKeyReleased !== \"function\") {\n                  this.handleButtonClicked(button, e);\n                }\n              };\n              buttonDOM.onmousedown = (e: KeyboardHandlerEvent) => {\n                /**\n                 * Fire button handler for onKeyReleased use-case\n                 */\n                if (\n                  typeof this.options.onKeyReleased === \"function\" &&\n                  !this.isMouseHold\n                ) {\n                  this.handleButtonClicked(button, e);\n                }\n                this.handleButtonMouseDown(button, e);\n              };\n              buttonDOM.onmouseup = (e: KeyboardHandlerEvent) => {\n                this.handleButtonMouseUp(button, e);\n              };\n            }\n          }\n\n          /**\n           * Adding identifier\n           */\n          buttonDOM.setAttribute(\"data-skBtn\", button);\n\n          /**\n           * Adding unique id\n           * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\n           */\n          const buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\n          buttonDOM.setAttribute(\"data-skBtnUID\", buttonUID);\n\n          /**\n           * Adding button label to button\n           */\n          const buttonSpanDOM = document.createElement(\"span\");\n          buttonSpanDOM.innerHTML = buttonDisplayName;\n          buttonDOM.appendChild(buttonSpanDOM);\n\n          /**\n           * Adding to buttonElements\n           */\n          if (!this.buttonElements[button]) this.buttonElements[button] = [];\n\n          this.buttonElements[button].push(buttonDOM);\n\n          /**\n           * Appending button to row\n           */\n          rowDOM.appendChild(buttonDOM);\n        });\n\n        /**\n         * Parse containers in row\n         */\n        rowDOM = this.parseRowDOMContainers(\n          rowDOM,\n          rIndex,\n          containerStartIndexes,\n          containerEndIndexes\n        );\n\n        /**\n         * Appending row to hg-rows\n         */\n        this.keyboardRowsDOM.appendChild(rowDOM);\n      }\n    );\n\n    /**\n     * Appending row to keyboard\n     */\n    this.keyboardDOM.appendChild(this.keyboardRowsDOM);\n\n    /**\n     * Calling onRender\n     */\n    this.onRender();\n\n    if (!this.initialized) {\n      /**\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\n       */\n      this.initialized = true;\n\n      /**\n       * Handling parent events\n       */\n      /* istanbul ignore next */\n      if (\n        this.utilities.pointerEventsSupported() &&\n        !useTouchEvents &&\n        !useMouseEvents\n      ) {\n        document.onpointerup = (e: KeyboardHandlerEvent) =>\n          this.handleButtonMouseUp(undefined, e);\n        this.keyboardDOM.onpointerdown = (e: KeyboardHandlerEvent) =>\n          this.handleKeyboardContainerMouseDown(e);\n      } else if (useTouchEvents) {\n        /**\n         * Handling ontouchend, ontouchcancel\n         */\n        document.ontouchend = (e: KeyboardHandlerEvent) =>\n          this.handleButtonMouseUp(undefined, e);\n        document.ontouchcancel = (e: KeyboardHandlerEvent) =>\n          this.handleButtonMouseUp(undefined, e);\n\n        this.keyboardDOM.ontouchstart = (e: KeyboardHandlerEvent) =>\n          this.handleKeyboardContainerMouseDown(e);\n      } else if (!useTouchEvents) {\n        /**\n         * Handling mouseup\n         */\n        document.onmouseup = (e: KeyboardHandlerEvent) =>\n          this.handleButtonMouseUp(undefined, e);\n        this.keyboardDOM.onmousedown = (e: KeyboardHandlerEvent) =>\n          this.handleKeyboardContainerMouseDown(e);\n      }\n\n      /**\n       * Calling onInit\n       */\n      this.onInit();\n    }\n  }\n}\n\nexport default SimpleKeyboard;\n","import SimpleKeyboard from \"./components/Keyboard\";\nexport { SimpleKeyboard };\nexport default SimpleKeyboard;\n"],"names":["CONSONANTS_HASH","CHO_HASH","JUNG_HASH","JONG_HASH","COMPLEX_CONSONANTS_HASH","COMPLEX_VOWELS_HASH","CHO","JUNG","JONG","HANGUL_OFFSET","_makeHash","array","length","hash","i","charCodeAt","_makeComplexHash","code1","code2","_isConsonant","c","_isCho","_isJung","_isJong","_isHangul","_isJungJoinable","a","b","_isJongJoinable","disassemble","string","grouped","Error","join","cho","jung","jong","code","r","result","temp","parseInt","push","concat","charAt","disassembleToString","str","assemble","previous_code","stage","complete_index","jong_joined","_makeHangul","index","jung1","jung2","jong2","jong1","hangul","step","String","fromCharCode","Searcher","this","disassembled","prototype","search","indexOf","d","ds","ad","bd","rangeSearch","haystack","needle","hex","nex","re","RegExp","indices","exec","findStart","findEnd","map","endsWithConsonant","endsWith","target","pop","isHangul","isComplete","isConsonant","isVowel","isCho","isJong","isHangulAll","isCompleteAll","isConsonantAll","isVowelAll","isChoAll","isJongAll","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","hasOwnProperty","call","Utilities","_ref","getOptions","getCaretPosition","getCaretPositionEnd","dispatch","_classCallCheck","_defineProperty","button","bindMethods","value","includes","buttonTypeClass","getButtonType","buttonWithoutBraces","replace","buttonNormalized","display","arguments","assign","getDefaultDiplay","input","caretPos","caretPosEnd","moveCaret","options","commonParams","output","removeAt","apply","removeForwardsAt","addStringAt","tabCharOnTab","newLineOnEnter","Number","isInteger","debug","console","log","minus","newCaretPos","updateCaretPosAction","instance","setCaretPosition","caretPosition","source","position","positionEnd","prevCharacter","slice","addingString","_toConsumableArray","isMaxLengthReached","updateCaretPos","emojiMatchedReg","isPrevHangul","substring","match","substr","removingCharacter","removedLength","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","_typeof","Boolean","window","navigator","maxTouchPoints","PointerEvent","toLowerCase","trim","split","reduce","word","toUpperCase","arr","size","Array","Math","ceil","_","newIndex","startMarkerIndex","myClass","_step","_iterator","_createForOfIteratorHelper","getOwnPropertyNames","s","n","done","myMethod","bind","err","e","f","PhysicalKeyboard","_this","altKey","ctrlKey","shiftKey","keyCodeToKey","keyCode","physicalKeyboardHighlightPreventDefault","isModifierKey","preventDefault","stopImmediatePropagation","buttonPressed","getSimpleKeyboardLayoutKey","buttonDOM","buttonName","standardButtonPressed","getButtonElement","functionButtonPressed","_buttonDOM$","_buttonDOM$$onpointer","_buttonDOM","_buttonDOM$onpointerd","applyButtonStyle","buttonElement","style","background","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","isArray","forEach","physicalKeyboardHighlightPress","physicalKeyboardHighlightPressUsePointerEvents","onpointerdown","physicalKeyboardHighlightPressUseClick","_buttonDOM$2","click","handleButtonClicked","_buttonDOM$3","_buttonDOM$3$onpointe","_buttonDOM$onpointeru","removeAttribute","onpointerup","_output","keyId","CandidateBox","utilities","pageSize","layoutCandidatesPageSize","candidateBoxElement","remove","pageIndex","_ref2","candidateValue","targetElement","onSelect","candidateListPages","chunkArray","renderPage","nbPages","onItemSelected","selectedCandidate","destroy","_ref3","_this$candidateBoxEle","_this2","document","createElement","className","candidateListULElement","candidateListItem","_this2$options$displa","candidateListLIElement","getMouseEvent","mouseEvent","useTouchEvents","TouchEvent","MouseEvent","innerHTML","ontouchstart","onclick","appendChild","isPrevBtnElementActive","prevBtnElement","classList","add","prevBtnElementClickAction","isNextBtnElementActive","nextBtnElement","nextBtnElementClickAction","prepend","SimpleKeyboard","selectorOrOptions","keyboardOptions","keyboardDOMClass","keyboardDOM","querySelector","HTMLDivElement","warn","caretPositionEnd","name","initCallback","modules","_len","baseDOMClasses","_key","filter","DOMClass","_this$handleParams","handleParams","_this$handleParams$op","_objectSpread","layoutName","theme","preventMouseDownDefault","enableLayoutCandidates","excludeFromLayout","keyboardPluginClasses","_this$options$inputNa","defaultName","buttonElements","currentInstanceName","camelCase","allKeyboardInstances","keyboardInstanceNames","keys","isFirstKeyboardInstance","physicalKeyboard","candidateBox","render","loadModules","endPosition","_this$options","layoutCandidatesObj","layoutCandidates","layoutCandidatesCaseSensitiveMatch","layoutCandidate","inputSubstr","regexp","escapeRegex","matchAll","candidateKey","sort","_this3","show","_this3$options","disableCandidateNormalization","enableLayoutCandidatesKeyPress","candidateStr","normalize","beforeInputUpdate","getInput","initialCaretPosition","newInputSubstr","newInput","caretPositionDiff","newCaretPosition","setInput","onKeyPress","onChange","onChangeAll","getAllInputs","_this$options2","_this$options2$inputN","getUpdatedInput","isStandardButton","activeInputElement","setSelectionRange","inputPattern","inputPatternIsValid","handleMaxLength","newInputValue","type","syncInstanceInputs","_this$candidateBox","_this$getInputCandida","getInputCandidates","showCandidatesBox","isMouseHold","_this4","stopMouseDownPropagation","stopPropagation","activeButtonClass","holdInteractionTimeout","clearTimeout","holdTimeout","setMouseHold","disableButtonHold","setTimeout","getMouseHold","handleButtonHold","_this5","preventMouseUpDefault","stopMouseUpPropagation","contains","recurseButtons","onKeyReleased","_this6","_this7","replaceInput","skipSync","rtl","_this8","changedOptions","onSetOptions","newOptions","_this9","optionName","JSON","stringify","keyboardRowsDOM","setAttribute","callback","buttons","_this10","classNameItem","buttonTheme","classNameFound","buttonThemeArray","class","_this11","_this11$options","_buttonTheme","_this11$options$butto","filteredButtonArray","item","splice","buttonArr","inputVal","inputPatternRaw","didInputMatch","test","_this$options$physica","addEventListener","handleKeyUp","handleKeyDown","handleMouseUp","handleTouchEnd","updateCaretOnSelectionChange","handleSelectionChange","handleSelect","event","caretEventHandler","physicalKeyboardHighlight","handleHighlightKeyUp","handleHighlightKeyDown","userAgent","targetTagName","_this12","tagName","isKeyboard","path","some","_item$hasAttribute","hasAttribute","disableCaretPositioning","selectionStart","selectionEnd","getRtlOffset","fn","_this13","_this$options$physica2","removeEventListener","ontouchend","ontouchcancel","onmouseup","onpointercancel","onmousedown","resetRows","initialized","buttonClasses","themeObj","themeObjClasses","buttonAttributes","attrObj","attribute","processAutoTouchEvents","disableContextualWindow","oncontextmenu","autoUseTouchEvents","setEventListeners","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","onModulesLoaded","_this14","KeyboardModule","keyboardModule","init","rowDOM","rowIndex","containerStartIndexes","containerEndIndexes","_this15","rowDOMArray","from","children","removedElements","startIndex","arrIndex","endIndex","updated_startIndex","updated_endIndex","containerDOM","containerUID","containedElements","element","_this16","layoutClass","layout","default","shift","useTouchEventsClass","disableRowButtonContainers","getKeyboardClassString","row","rIndex","rowArray","bIndex","_buttonDOM$classList","buttonHasContainerStart","buttonHasContainerEnd","fctBtnClass","getButtonClass","buttonDisplayName","getButtonDisplayName","mergeDisplay","buttonType","useButtonTag","getButtonThemeClasses","setDOMButtonAttributes","handleButtonMouseDown","handleButtonMouseUp","buttonUID","buttonSpanDOM","parseRowDOMContainers","handleKeyboardContainerMouseDown"],"sourceRoot":""}